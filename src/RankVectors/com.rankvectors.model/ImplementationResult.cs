// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// ImplementationResult
    /// </summary>
    public partial class ImplementationResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImplementationResult" /> class.
        /// </summary>
        /// <param name="success">Whether implementation succeeded</param>
        /// <param name="implementationId">Implementation identifier</param>
        /// <param name="creditsUsed">Credits consumed</param>
        /// <param name="error">Error message if failed</param>
        [JsonConstructor]
        public ImplementationResult(bool success, Option<string?> implementationId = default, Option<decimal?> creditsUsed = default, Option<string?> error = default)
        {
            Success = success;
            ImplementationIdOption = implementationId;
            CreditsUsedOption = creditsUsed;
            ErrorOption = error;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Whether implementation succeeded
        /// </summary>
        /// <value>Whether implementation succeeded</value>
        /* <example>true</example> */
        [JsonPropertyName("success")]
        public bool Success { get; set; }

        /// <summary>
        /// Used to track the state of ImplementationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ImplementationIdOption { get; private set; }

        /// <summary>
        /// Implementation identifier
        /// </summary>
        /// <value>Implementation identifier</value>
        /* <example>impl-123</example> */
        [JsonPropertyName("implementationId")]
        public string? ImplementationId { get { return this.ImplementationIdOption; } set { this.ImplementationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreditsUsed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> CreditsUsedOption { get; private set; }

        /// <summary>
        /// Credits consumed
        /// </summary>
        /// <value>Credits consumed</value>
        /* <example>1</example> */
        [JsonPropertyName("creditsUsed")]
        public decimal? CreditsUsed { get { return this.CreditsUsedOption; } set { this.CreditsUsedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ErrorOption { get; private set; }

        /// <summary>
        /// Error message if failed
        /// </summary>
        /// <value>Error message if failed</value>
        /* <example>Insufficient credits</example> */
        [JsonPropertyName("error")]
        public string? Error { get { return this.ErrorOption; } set { this.ErrorOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImplementationResult {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ImplementationId: ").Append(ImplementationId).Append("\n");
            sb.Append("  CreditsUsed: ").Append(CreditsUsed).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImplementationResult" />
    /// </summary>
    public class ImplementationResultJsonConverter : JsonConverter<ImplementationResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImplementationResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImplementationResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> success = default;
            Option<string?> implementationId = default;
            Option<decimal?> creditsUsed = default;
            Option<string?> error = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "implementationId":
                            implementationId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "creditsUsed":
                            creditsUsed = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "error":
                            error = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!success.IsSet)
                throw new ArgumentException("Property is required for class ImplementationResult.", nameof(success));

            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class ImplementationResult.");

            if (implementationId.IsSet && implementationId.Value == null)
                throw new ArgumentNullException(nameof(implementationId), "Property is not nullable for class ImplementationResult.");

            if (creditsUsed.IsSet && creditsUsed.Value == null)
                throw new ArgumentNullException(nameof(creditsUsed), "Property is not nullable for class ImplementationResult.");

            if (error.IsSet && error.Value == null)
                throw new ArgumentNullException(nameof(error), "Property is not nullable for class ImplementationResult.");

            return new ImplementationResult(success.Value!.Value!, implementationId, creditsUsed, error);
        }

        /// <summary>
        /// Serializes a <see cref="ImplementationResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="implementationResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImplementationResult implementationResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, implementationResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImplementationResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="implementationResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImplementationResult implementationResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (implementationResult.ImplementationIdOption.IsSet && implementationResult.ImplementationId == null)
                throw new ArgumentNullException(nameof(implementationResult.ImplementationId), "Property is required for class ImplementationResult.");

            if (implementationResult.ErrorOption.IsSet && implementationResult.Error == null)
                throw new ArgumentNullException(nameof(implementationResult.Error), "Property is required for class ImplementationResult.");

            writer.WriteBoolean("success", implementationResult.Success);

            if (implementationResult.ImplementationIdOption.IsSet)
                writer.WriteString("implementationId", implementationResult.ImplementationId);

            if (implementationResult.CreditsUsedOption.IsSet)
                writer.WriteNumber("creditsUsed", implementationResult.CreditsUsedOption.Value!.Value);

            if (implementationResult.ErrorOption.IsSet)
                writer.WriteString("error", implementationResult.Error);
        }
    }
}
