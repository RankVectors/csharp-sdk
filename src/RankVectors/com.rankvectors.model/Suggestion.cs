// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// Suggestion
    /// </summary>
    public partial class Suggestion : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Suggestion" /> class.
        /// </summary>
        /// <param name="id">Unique suggestion identifier</param>
        /// <param name="projectId">Project identifier</param>
        /// <param name="status">Suggestion status</param>
        /// <param name="relevanceScore">AI-calculated relevance score (0-1)</param>
        /// <param name="anchorText">Suggested anchor text</param>
        /// <param name="sourcePage">sourcePage</param>
        /// <param name="targetPage">targetPage</param>
        /// <param name="createdAt">Suggestion creation timestamp</param>
        /// <param name="context">Context where the link should be placed</param>
        /// <param name="reasoning">AI reasoning for the suggestion</param>
        /// <param name="updatedAt">Last update timestamp</param>
        [JsonConstructor]
        public Suggestion(string id, string projectId, StatusEnum status, decimal relevanceScore, string anchorText, PageInfo sourcePage, PageInfo targetPage, DateTime createdAt, Option<string?> context = default, Option<string?> reasoning = default, Option<DateTime?> updatedAt = default)
        {
            Id = id;
            ProjectId = projectId;
            Status = status;
            RelevanceScore = relevanceScore;
            AnchorText = anchorText;
            SourcePage = sourcePage;
            TargetPage = targetPage;
            CreatedAt = createdAt;
            ContextOption = context;
            ReasoningOption = reasoning;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Suggestion status
        /// </summary>
        /// <value>Suggestion status</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 1,

            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            Approved = 2,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            Rejected = 3,

            /// <summary>
            /// Enum Implemented for value: implemented
            /// </summary>
            Implemented = 4
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("approved"))
                return StatusEnum.Approved;

            if (value.Equals("rejected"))
                return StatusEnum.Rejected;

            if (value.Equals("implemented"))
                return StatusEnum.Implemented;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("approved"))
                return StatusEnum.Approved;

            if (value.Equals("rejected"))
                return StatusEnum.Rejected;

            if (value.Equals("implemented"))
                return StatusEnum.Implemented;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Pending)
                return "pending";

            if (value == StatusEnum.Approved)
                return "approved";

            if (value == StatusEnum.Rejected)
                return "rejected";

            if (value == StatusEnum.Implemented)
                return "implemented";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Suggestion status
        /// </summary>
        /// <value>Suggestion status</value>
        /* <example>pending</example> */
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Unique suggestion identifier
        /// </summary>
        /// <value>Unique suggestion identifier</value>
        /* <example>sugg-123</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Project identifier
        /// </summary>
        /// <value>Project identifier</value>
        /* <example>proj-123</example> */
        [JsonPropertyName("projectId")]
        public string ProjectId { get; set; }

        /// <summary>
        /// AI-calculated relevance score (0-1)
        /// </summary>
        /// <value>AI-calculated relevance score (0-1)</value>
        /* <example>0.85</example> */
        [JsonPropertyName("relevanceScore")]
        public decimal RelevanceScore { get; set; }

        /// <summary>
        /// Suggested anchor text
        /// </summary>
        /// <value>Suggested anchor text</value>
        /* <example>internal linking</example> */
        [JsonPropertyName("anchorText")]
        public string AnchorText { get; set; }

        /// <summary>
        /// Gets or Sets SourcePage
        /// </summary>
        [JsonPropertyName("sourcePage")]
        public PageInfo SourcePage { get; set; }

        /// <summary>
        /// Gets or Sets TargetPage
        /// </summary>
        [JsonPropertyName("targetPage")]
        public PageInfo TargetPage { get; set; }

        /// <summary>
        /// Suggestion creation timestamp
        /// </summary>
        /// <value>Suggestion creation timestamp</value>
        /* <example>2025-01-15T10:00Z</example> */
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Context
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContextOption { get; private set; }

        /// <summary>
        /// Context where the link should be placed
        /// </summary>
        /// <value>Context where the link should be placed</value>
        /* <example>Learn more about internal linking strategies.</example> */
        [JsonPropertyName("context")]
        public string? Context { get { return this.ContextOption; } set { this.ContextOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reasoning
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasoningOption { get; private set; }

        /// <summary>
        /// AI reasoning for the suggestion
        /// </summary>
        /// <value>AI reasoning for the suggestion</value>
        /* <example>High semantic similarity between source and target content</example> */
        [JsonPropertyName("reasoning")]
        public string? Reasoning { get { return this.ReasoningOption; } set { this.ReasoningOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Last update timestamp
        /// </summary>
        /// <value>Last update timestamp</value>
        /* <example>2025-01-15T10:00Z</example> */
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Suggestion {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RelevanceScore: ").Append(RelevanceScore).Append("\n");
            sb.Append("  AnchorText: ").Append(AnchorText).Append("\n");
            sb.Append("  SourcePage: ").Append(SourcePage).Append("\n");
            sb.Append("  TargetPage: ").Append(TargetPage).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Reasoning: ").Append(Reasoning).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RelevanceScore (decimal) maximum
            if (this.RelevanceScore > (decimal)1)
            {
                yield return new ValidationResult("Invalid value for RelevanceScore, must be a value less than or equal to 1.", new [] { "RelevanceScore" });
            }

            // RelevanceScore (decimal) minimum
            if (this.RelevanceScore < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for RelevanceScore, must be a value greater than or equal to 0.", new [] { "RelevanceScore" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Suggestion" />
    /// </summary>
    public class SuggestionJsonConverter : JsonConverter<Suggestion>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Suggestion" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Suggestion Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> projectId = default;
            Option<Suggestion.StatusEnum?> status = default;
            Option<decimal?> relevanceScore = default;
            Option<string?> anchorText = default;
            Option<PageInfo?> sourcePage = default;
            Option<PageInfo?> targetPage = default;
            Option<DateTime?> createdAt = default;
            Option<string?> context = default;
            Option<string?> reasoning = default;
            Option<DateTime?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "projectId":
                            projectId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<Suggestion.StatusEnum?>(Suggestion.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "relevanceScore":
                            relevanceScore = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "anchorText":
                            anchorText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sourcePage":
                            sourcePage = new Option<PageInfo?>(JsonSerializer.Deserialize<PageInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "targetPage":
                            targetPage = new Option<PageInfo?>(JsonSerializer.Deserialize<PageInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "context":
                            context = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reasoning":
                            reasoning = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Suggestion.", nameof(id));

            if (!projectId.IsSet)
                throw new ArgumentException("Property is required for class Suggestion.", nameof(projectId));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class Suggestion.", nameof(status));

            if (!relevanceScore.IsSet)
                throw new ArgumentException("Property is required for class Suggestion.", nameof(relevanceScore));

            if (!anchorText.IsSet)
                throw new ArgumentException("Property is required for class Suggestion.", nameof(anchorText));

            if (!sourcePage.IsSet)
                throw new ArgumentException("Property is required for class Suggestion.", nameof(sourcePage));

            if (!targetPage.IsSet)
                throw new ArgumentException("Property is required for class Suggestion.", nameof(targetPage));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class Suggestion.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Suggestion.");

            if (projectId.IsSet && projectId.Value == null)
                throw new ArgumentNullException(nameof(projectId), "Property is not nullable for class Suggestion.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Suggestion.");

            if (relevanceScore.IsSet && relevanceScore.Value == null)
                throw new ArgumentNullException(nameof(relevanceScore), "Property is not nullable for class Suggestion.");

            if (anchorText.IsSet && anchorText.Value == null)
                throw new ArgumentNullException(nameof(anchorText), "Property is not nullable for class Suggestion.");

            if (sourcePage.IsSet && sourcePage.Value == null)
                throw new ArgumentNullException(nameof(sourcePage), "Property is not nullable for class Suggestion.");

            if (targetPage.IsSet && targetPage.Value == null)
                throw new ArgumentNullException(nameof(targetPage), "Property is not nullable for class Suggestion.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Suggestion.");

            if (context.IsSet && context.Value == null)
                throw new ArgumentNullException(nameof(context), "Property is not nullable for class Suggestion.");

            if (reasoning.IsSet && reasoning.Value == null)
                throw new ArgumentNullException(nameof(reasoning), "Property is not nullable for class Suggestion.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class Suggestion.");

            return new Suggestion(id.Value!, projectId.Value!, status.Value!.Value!, relevanceScore.Value!.Value!, anchorText.Value!, sourcePage.Value!, targetPage.Value!, createdAt.Value!.Value!, context, reasoning, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="Suggestion" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="suggestion"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Suggestion suggestion, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, suggestion, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Suggestion" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="suggestion"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Suggestion suggestion, JsonSerializerOptions jsonSerializerOptions)
        {
            if (suggestion.Id == null)
                throw new ArgumentNullException(nameof(suggestion.Id), "Property is required for class Suggestion.");

            if (suggestion.ProjectId == null)
                throw new ArgumentNullException(nameof(suggestion.ProjectId), "Property is required for class Suggestion.");

            if (suggestion.AnchorText == null)
                throw new ArgumentNullException(nameof(suggestion.AnchorText), "Property is required for class Suggestion.");

            if (suggestion.SourcePage == null)
                throw new ArgumentNullException(nameof(suggestion.SourcePage), "Property is required for class Suggestion.");

            if (suggestion.TargetPage == null)
                throw new ArgumentNullException(nameof(suggestion.TargetPage), "Property is required for class Suggestion.");

            if (suggestion.ContextOption.IsSet && suggestion.Context == null)
                throw new ArgumentNullException(nameof(suggestion.Context), "Property is required for class Suggestion.");

            if (suggestion.ReasoningOption.IsSet && suggestion.Reasoning == null)
                throw new ArgumentNullException(nameof(suggestion.Reasoning), "Property is required for class Suggestion.");

            writer.WriteString("id", suggestion.Id);

            writer.WriteString("projectId", suggestion.ProjectId);

            var statusRawValue = Suggestion.StatusEnumToJsonValue(suggestion.Status);
            writer.WriteString("status", statusRawValue);
            writer.WriteNumber("relevanceScore", suggestion.RelevanceScore);

            writer.WriteString("anchorText", suggestion.AnchorText);

            writer.WritePropertyName("sourcePage");
            JsonSerializer.Serialize(writer, suggestion.SourcePage, jsonSerializerOptions);
            writer.WritePropertyName("targetPage");
            JsonSerializer.Serialize(writer, suggestion.TargetPage, jsonSerializerOptions);
            writer.WriteString("createdAt", suggestion.CreatedAt.ToString(CreatedAtFormat));

            if (suggestion.ContextOption.IsSet)
                writer.WriteString("context", suggestion.Context);

            if (suggestion.ReasoningOption.IsSet)
                writer.WriteString("reasoning", suggestion.Reasoning);

            if (suggestion.UpdatedAtOption.IsSet)
                writer.WriteString("updatedAt", suggestion.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));
        }
    }
}
