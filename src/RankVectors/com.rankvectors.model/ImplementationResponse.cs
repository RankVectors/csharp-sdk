// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// ImplementationResponse
    /// </summary>
    public partial class ImplementationResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImplementationResponse" /> class.
        /// </summary>
        /// <param name="success">Whether any implementations succeeded</param>
        /// <param name="results">Individual implementation results</param>
        /// <param name="summary">summary</param>
        [JsonConstructor]
        public ImplementationResponse(bool success, List<ImplementationResult> results, ImplementationSummary summary)
        {
            Success = success;
            Results = results;
            Summary = summary;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Whether any implementations succeeded
        /// </summary>
        /// <value>Whether any implementations succeeded</value>
        /* <example>true</example> */
        [JsonPropertyName("success")]
        public bool Success { get; set; }

        /// <summary>
        /// Individual implementation results
        /// </summary>
        /// <value>Individual implementation results</value>
        [JsonPropertyName("results")]
        public List<ImplementationResult> Results { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [JsonPropertyName("summary")]
        public ImplementationSummary Summary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImplementationResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImplementationResponse" />
    /// </summary>
    public class ImplementationResponseJsonConverter : JsonConverter<ImplementationResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImplementationResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImplementationResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> success = default;
            Option<List<ImplementationResult>?> results = default;
            Option<ImplementationSummary?> summary = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "results":
                            results = new Option<List<ImplementationResult>?>(JsonSerializer.Deserialize<List<ImplementationResult>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "summary":
                            summary = new Option<ImplementationSummary?>(JsonSerializer.Deserialize<ImplementationSummary>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!success.IsSet)
                throw new ArgumentException("Property is required for class ImplementationResponse.", nameof(success));

            if (!results.IsSet)
                throw new ArgumentException("Property is required for class ImplementationResponse.", nameof(results));

            if (!summary.IsSet)
                throw new ArgumentException("Property is required for class ImplementationResponse.", nameof(summary));

            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class ImplementationResponse.");

            if (results.IsSet && results.Value == null)
                throw new ArgumentNullException(nameof(results), "Property is not nullable for class ImplementationResponse.");

            if (summary.IsSet && summary.Value == null)
                throw new ArgumentNullException(nameof(summary), "Property is not nullable for class ImplementationResponse.");

            return new ImplementationResponse(success.Value!.Value!, results.Value!, summary.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ImplementationResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="implementationResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImplementationResponse implementationResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, implementationResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImplementationResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="implementationResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImplementationResponse implementationResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (implementationResponse.Results == null)
                throw new ArgumentNullException(nameof(implementationResponse.Results), "Property is required for class ImplementationResponse.");

            if (implementationResponse.Summary == null)
                throw new ArgumentNullException(nameof(implementationResponse.Summary), "Property is required for class ImplementationResponse.");

            writer.WriteBoolean("success", implementationResponse.Success);

            writer.WritePropertyName("results");
            JsonSerializer.Serialize(writer, implementationResponse.Results, jsonSerializerOptions);
            writer.WritePropertyName("summary");
            JsonSerializer.Serialize(writer, implementationResponse.Summary, jsonSerializerOptions);
        }
    }
}
