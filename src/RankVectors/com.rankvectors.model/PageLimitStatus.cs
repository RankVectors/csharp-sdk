// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// PageLimitStatus
    /// </summary>
    public partial class PageLimitStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageLimitStatus" /> class.
        /// </summary>
        /// <param name="limit">Page limit</param>
        /// <param name="used">Pages used</param>
        /// <param name="remaining">Pages remaining</param>
        [JsonConstructor]
        public PageLimitStatus(int limit, int used, int remaining)
        {
            Limit = limit;
            Used = used;
            Remaining = remaining;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Page limit
        /// </summary>
        /// <value>Page limit</value>
        /* <example>1000</example> */
        [JsonPropertyName("limit")]
        public int Limit { get; set; }

        /// <summary>
        /// Pages used
        /// </summary>
        /// <value>Pages used</value>
        /* <example>150</example> */
        [JsonPropertyName("used")]
        public int Used { get; set; }

        /// <summary>
        /// Pages remaining
        /// </summary>
        /// <value>Pages remaining</value>
        /* <example>850</example> */
        [JsonPropertyName("remaining")]
        public int Remaining { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PageLimitStatus {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Used: ").Append(Used).Append("\n");
            sb.Append("  Remaining: ").Append(Remaining).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PageLimitStatus" />
    /// </summary>
    public class PageLimitStatusJsonConverter : JsonConverter<PageLimitStatus>
    {
        /// <summary>
        /// Deserializes json to <see cref="PageLimitStatus" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PageLimitStatus Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> limit = default;
            Option<int?> used = default;
            Option<int?> remaining = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "limit":
                            limit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "used":
                            used = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "remaining":
                            remaining = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!limit.IsSet)
                throw new ArgumentException("Property is required for class PageLimitStatus.", nameof(limit));

            if (!used.IsSet)
                throw new ArgumentException("Property is required for class PageLimitStatus.", nameof(used));

            if (!remaining.IsSet)
                throw new ArgumentException("Property is required for class PageLimitStatus.", nameof(remaining));

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit), "Property is not nullable for class PageLimitStatus.");

            if (used.IsSet && used.Value == null)
                throw new ArgumentNullException(nameof(used), "Property is not nullable for class PageLimitStatus.");

            if (remaining.IsSet && remaining.Value == null)
                throw new ArgumentNullException(nameof(remaining), "Property is not nullable for class PageLimitStatus.");

            return new PageLimitStatus(limit.Value!.Value!, used.Value!.Value!, remaining.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PageLimitStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pageLimitStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PageLimitStatus pageLimitStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pageLimitStatus, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PageLimitStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pageLimitStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PageLimitStatus pageLimitStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("limit", pageLimitStatus.Limit);

            writer.WriteNumber("used", pageLimitStatus.Used);

            writer.WriteNumber("remaining", pageLimitStatus.Remaining);
        }
    }
}
