// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// ContentVerification
    /// </summary>
    public partial class ContentVerification : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentVerification" /> class.
        /// </summary>
        /// <param name="safe">Whether it&#39;s safe to implement the link</param>
        /// <param name="reason">Reason for the verification result</param>
        /// <param name="changeResult">changeResult</param>
        [JsonConstructor]
        public ContentVerification(bool safe, string reason, Option<ChangeResult?> changeResult = default)
        {
            Safe = safe;
            Reason = reason;
            ChangeResultOption = changeResult;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Whether it&#39;s safe to implement the link
        /// </summary>
        /// <value>Whether it&#39;s safe to implement the link</value>
        /* <example>true</example> */
        [JsonPropertyName("safe")]
        public bool Safe { get; set; }

        /// <summary>
        /// Reason for the verification result
        /// </summary>
        /// <value>Reason for the verification result</value>
        /* <example>Page is same</example> */
        [JsonPropertyName("reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Used to track the state of ChangeResult
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ChangeResult?> ChangeResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChangeResult
        /// </summary>
        [JsonPropertyName("changeResult")]
        public ChangeResult? ChangeResult { get { return this.ChangeResultOption; } set { this.ChangeResultOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentVerification {\n");
            sb.Append("  Safe: ").Append(Safe).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ChangeResult: ").Append(ChangeResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ContentVerification" />
    /// </summary>
    public class ContentVerificationJsonConverter : JsonConverter<ContentVerification>
    {
        /// <summary>
        /// Deserializes json to <see cref="ContentVerification" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ContentVerification Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> safe = default;
            Option<string?> reason = default;
            Option<ChangeResult?> changeResult = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "safe":
                            safe = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "reason":
                            reason = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "changeResult":
                            changeResult = new Option<ChangeResult?>(JsonSerializer.Deserialize<ChangeResult>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!safe.IsSet)
                throw new ArgumentException("Property is required for class ContentVerification.", nameof(safe));

            if (!reason.IsSet)
                throw new ArgumentException("Property is required for class ContentVerification.", nameof(reason));

            if (safe.IsSet && safe.Value == null)
                throw new ArgumentNullException(nameof(safe), "Property is not nullable for class ContentVerification.");

            if (reason.IsSet && reason.Value == null)
                throw new ArgumentNullException(nameof(reason), "Property is not nullable for class ContentVerification.");

            if (changeResult.IsSet && changeResult.Value == null)
                throw new ArgumentNullException(nameof(changeResult), "Property is not nullable for class ContentVerification.");

            return new ContentVerification(safe.Value!.Value!, reason.Value!, changeResult);
        }

        /// <summary>
        /// Serializes a <see cref="ContentVerification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contentVerification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ContentVerification contentVerification, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, contentVerification, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ContentVerification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contentVerification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ContentVerification contentVerification, JsonSerializerOptions jsonSerializerOptions)
        {
            if (contentVerification.Reason == null)
                throw new ArgumentNullException(nameof(contentVerification.Reason), "Property is required for class ContentVerification.");

            if (contentVerification.ChangeResultOption.IsSet && contentVerification.ChangeResult == null)
                throw new ArgumentNullException(nameof(contentVerification.ChangeResult), "Property is required for class ContentVerification.");

            writer.WriteBoolean("safe", contentVerification.Safe);

            writer.WriteString("reason", contentVerification.Reason);

            if (contentVerification.ChangeResultOption.IsSet)
            {
                writer.WritePropertyName("changeResult");
                JsonSerializer.Serialize(writer, contentVerification.ChangeResult, jsonSerializerOptions);
            }
        }
    }
}
