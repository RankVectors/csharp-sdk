// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// ChangeResult
    /// </summary>
    public partial class ChangeResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeResult" /> class.
        /// </summary>
        /// <param name="pageUrl">URL of the page</param>
        /// <param name="changeStatus">Change status</param>
        /// <param name="visibility">Page visibility</param>
        /// <param name="previousScrapeAt">Previous scrape timestamp</param>
        [JsonConstructor]
        public ChangeResult(string pageUrl, ChangeStatusEnum changeStatus, VisibilityEnum visibility, Option<DateTime?> previousScrapeAt = default)
        {
            PageUrl = pageUrl;
            ChangeStatus = changeStatus;
            Visibility = visibility;
            PreviousScrapeAtOption = previousScrapeAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Change status
        /// </summary>
        /// <value>Change status</value>
        public enum ChangeStatusEnum
        {
            /// <summary>
            /// Enum Same for value: same
            /// </summary>
            Same = 1,

            /// <summary>
            /// Enum Changed for value: changed
            /// </summary>
            Changed = 2,

            /// <summary>
            /// Enum NotFound for value: not_found
            /// </summary>
            NotFound = 3
        }

        /// <summary>
        /// Returns a <see cref="ChangeStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ChangeStatusEnum ChangeStatusEnumFromString(string value)
        {
            if (value.Equals("same"))
                return ChangeStatusEnum.Same;

            if (value.Equals("changed"))
                return ChangeStatusEnum.Changed;

            if (value.Equals("not_found"))
                return ChangeStatusEnum.NotFound;

            throw new NotImplementedException($"Could not convert value to type ChangeStatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ChangeStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChangeStatusEnum? ChangeStatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("same"))
                return ChangeStatusEnum.Same;

            if (value.Equals("changed"))
                return ChangeStatusEnum.Changed;

            if (value.Equals("not_found"))
                return ChangeStatusEnum.NotFound;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChangeStatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ChangeStatusEnumToJsonValue(ChangeStatusEnum value)
        {
            if (value == ChangeStatusEnum.Same)
                return "same";

            if (value == ChangeStatusEnum.Changed)
                return "changed";

            if (value == ChangeStatusEnum.NotFound)
                return "not_found";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Change status
        /// </summary>
        /// <value>Change status</value>
        /* <example>same</example> */
        [JsonPropertyName("changeStatus")]
        public ChangeStatusEnum ChangeStatus { get; set; }

        /// <summary>
        /// Page visibility
        /// </summary>
        /// <value>Page visibility</value>
        public enum VisibilityEnum
        {
            /// <summary>
            /// Enum Visible for value: visible
            /// </summary>
            Visible = 1,

            /// <summary>
            /// Enum Hidden for value: hidden
            /// </summary>
            Hidden = 2,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            Error = 3
        }

        /// <summary>
        /// Returns a <see cref="VisibilityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static VisibilityEnum VisibilityEnumFromString(string value)
        {
            if (value.Equals("visible"))
                return VisibilityEnum.Visible;

            if (value.Equals("hidden"))
                return VisibilityEnum.Hidden;

            if (value.Equals("error"))
                return VisibilityEnum.Error;

            throw new NotImplementedException($"Could not convert value to type VisibilityEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="VisibilityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VisibilityEnum? VisibilityEnumFromStringOrDefault(string value)
        {
            if (value.Equals("visible"))
                return VisibilityEnum.Visible;

            if (value.Equals("hidden"))
                return VisibilityEnum.Hidden;

            if (value.Equals("error"))
                return VisibilityEnum.Error;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VisibilityEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string VisibilityEnumToJsonValue(VisibilityEnum value)
        {
            if (value == VisibilityEnum.Visible)
                return "visible";

            if (value == VisibilityEnum.Hidden)
                return "hidden";

            if (value == VisibilityEnum.Error)
                return "error";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Page visibility
        /// </summary>
        /// <value>Page visibility</value>
        /* <example>visible</example> */
        [JsonPropertyName("visibility")]
        public VisibilityEnum Visibility { get; set; }

        /// <summary>
        /// URL of the page
        /// </summary>
        /// <value>URL of the page</value>
        /* <example>https://example.com/page</example> */
        [JsonPropertyName("pageUrl")]
        public string PageUrl { get; set; }

        /// <summary>
        /// Used to track the state of PreviousScrapeAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> PreviousScrapeAtOption { get; private set; }

        /// <summary>
        /// Previous scrape timestamp
        /// </summary>
        /// <value>Previous scrape timestamp</value>
        /* <example>2025-01-14T10:00Z</example> */
        [JsonPropertyName("previousScrapeAt")]
        public DateTime? PreviousScrapeAt { get { return this.PreviousScrapeAtOption; } set { this.PreviousScrapeAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangeResult {\n");
            sb.Append("  PageUrl: ").Append(PageUrl).Append("\n");
            sb.Append("  ChangeStatus: ").Append(ChangeStatus).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  PreviousScrapeAt: ").Append(PreviousScrapeAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChangeResult" />
    /// </summary>
    public class ChangeResultJsonConverter : JsonConverter<ChangeResult>
    {
        /// <summary>
        /// The format to use to serialize PreviousScrapeAt
        /// </summary>
        public static string PreviousScrapeAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ChangeResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChangeResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> pageUrl = default;
            Option<ChangeResult.ChangeStatusEnum?> changeStatus = default;
            Option<ChangeResult.VisibilityEnum?> visibility = default;
            Option<DateTime?> previousScrapeAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "pageUrl":
                            pageUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "changeStatus":
                            string? changeStatusRawValue = utf8JsonReader.GetString();
                            if (changeStatusRawValue != null)
                                changeStatus = new Option<ChangeResult.ChangeStatusEnum?>(ChangeResult.ChangeStatusEnumFromStringOrDefault(changeStatusRawValue));
                            break;
                        case "visibility":
                            string? visibilityRawValue = utf8JsonReader.GetString();
                            if (visibilityRawValue != null)
                                visibility = new Option<ChangeResult.VisibilityEnum?>(ChangeResult.VisibilityEnumFromStringOrDefault(visibilityRawValue));
                            break;
                        case "previousScrapeAt":
                            previousScrapeAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!pageUrl.IsSet)
                throw new ArgumentException("Property is required for class ChangeResult.", nameof(pageUrl));

            if (!changeStatus.IsSet)
                throw new ArgumentException("Property is required for class ChangeResult.", nameof(changeStatus));

            if (!visibility.IsSet)
                throw new ArgumentException("Property is required for class ChangeResult.", nameof(visibility));

            if (pageUrl.IsSet && pageUrl.Value == null)
                throw new ArgumentNullException(nameof(pageUrl), "Property is not nullable for class ChangeResult.");

            if (changeStatus.IsSet && changeStatus.Value == null)
                throw new ArgumentNullException(nameof(changeStatus), "Property is not nullable for class ChangeResult.");

            if (visibility.IsSet && visibility.Value == null)
                throw new ArgumentNullException(nameof(visibility), "Property is not nullable for class ChangeResult.");

            if (previousScrapeAt.IsSet && previousScrapeAt.Value == null)
                throw new ArgumentNullException(nameof(previousScrapeAt), "Property is not nullable for class ChangeResult.");

            return new ChangeResult(pageUrl.Value!, changeStatus.Value!.Value!, visibility.Value!.Value!, previousScrapeAt);
        }

        /// <summary>
        /// Serializes a <see cref="ChangeResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="changeResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChangeResult changeResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, changeResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChangeResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="changeResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChangeResult changeResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (changeResult.PageUrl == null)
                throw new ArgumentNullException(nameof(changeResult.PageUrl), "Property is required for class ChangeResult.");

            writer.WriteString("pageUrl", changeResult.PageUrl);

            var changeStatusRawValue = ChangeResult.ChangeStatusEnumToJsonValue(changeResult.ChangeStatus);
            writer.WriteString("changeStatus", changeStatusRawValue);
            var visibilityRawValue = ChangeResult.VisibilityEnumToJsonValue(changeResult.Visibility);
            writer.WriteString("visibility", visibilityRawValue);
            if (changeResult.PreviousScrapeAtOption.IsSet)
                writer.WriteString("previousScrapeAt", changeResult.PreviousScrapeAtOption.Value!.Value.ToString(PreviousScrapeAtFormat));
        }
    }
}
