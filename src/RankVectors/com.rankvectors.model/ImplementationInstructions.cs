// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// ImplementationInstructions
    /// </summary>
    public partial class ImplementationInstructions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImplementationInstructions" /> class.
        /// </summary>
        /// <param name="suggestionId">Suggestion identifier</param>
        /// <param name="pageUrl">URL of the page to modify</param>
        /// <param name="anchorText">Text to turn into a link</param>
        /// <param name="targetUrl">URL to link to</param>
        /// <param name="context">Context where the link should be placed</param>
        /// <param name="instructions">instructions</param>
        [JsonConstructor]
        public ImplementationInstructions(string suggestionId, string pageUrl, string anchorText, string targetUrl, string context, StepByStepInstructions instructions)
        {
            SuggestionId = suggestionId;
            PageUrl = pageUrl;
            AnchorText = anchorText;
            TargetUrl = targetUrl;
            Context = context;
            Instructions = instructions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Suggestion identifier
        /// </summary>
        /// <value>Suggestion identifier</value>
        /* <example>sugg-123</example> */
        [JsonPropertyName("suggestionId")]
        public string SuggestionId { get; set; }

        /// <summary>
        /// URL of the page to modify
        /// </summary>
        /// <value>URL of the page to modify</value>
        /* <example>https://example.com/page</example> */
        [JsonPropertyName("pageUrl")]
        public string PageUrl { get; set; }

        /// <summary>
        /// Text to turn into a link
        /// </summary>
        /// <value>Text to turn into a link</value>
        /* <example>internal linking</example> */
        [JsonPropertyName("anchorText")]
        public string AnchorText { get; set; }

        /// <summary>
        /// URL to link to
        /// </summary>
        /// <value>URL to link to</value>
        /* <example>https://example.com/target</example> */
        [JsonPropertyName("targetUrl")]
        public string TargetUrl { get; set; }

        /// <summary>
        /// Context where the link should be placed
        /// </summary>
        /// <value>Context where the link should be placed</value>
        /* <example>Learn more about internal linking strategies.</example> */
        [JsonPropertyName("context")]
        public string Context { get; set; }

        /// <summary>
        /// Gets or Sets Instructions
        /// </summary>
        [JsonPropertyName("instructions")]
        public StepByStepInstructions Instructions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImplementationInstructions {\n");
            sb.Append("  SuggestionId: ").Append(SuggestionId).Append("\n");
            sb.Append("  PageUrl: ").Append(PageUrl).Append("\n");
            sb.Append("  AnchorText: ").Append(AnchorText).Append("\n");
            sb.Append("  TargetUrl: ").Append(TargetUrl).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImplementationInstructions" />
    /// </summary>
    public class ImplementationInstructionsJsonConverter : JsonConverter<ImplementationInstructions>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImplementationInstructions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImplementationInstructions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> suggestionId = default;
            Option<string?> pageUrl = default;
            Option<string?> anchorText = default;
            Option<string?> targetUrl = default;
            Option<string?> context = default;
            Option<StepByStepInstructions?> instructions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "suggestionId":
                            suggestionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pageUrl":
                            pageUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "anchorText":
                            anchorText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "targetUrl":
                            targetUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "context":
                            context = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "instructions":
                            instructions = new Option<StepByStepInstructions?>(JsonSerializer.Deserialize<StepByStepInstructions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!suggestionId.IsSet)
                throw new ArgumentException("Property is required for class ImplementationInstructions.", nameof(suggestionId));

            if (!pageUrl.IsSet)
                throw new ArgumentException("Property is required for class ImplementationInstructions.", nameof(pageUrl));

            if (!anchorText.IsSet)
                throw new ArgumentException("Property is required for class ImplementationInstructions.", nameof(anchorText));

            if (!targetUrl.IsSet)
                throw new ArgumentException("Property is required for class ImplementationInstructions.", nameof(targetUrl));

            if (!context.IsSet)
                throw new ArgumentException("Property is required for class ImplementationInstructions.", nameof(context));

            if (!instructions.IsSet)
                throw new ArgumentException("Property is required for class ImplementationInstructions.", nameof(instructions));

            if (suggestionId.IsSet && suggestionId.Value == null)
                throw new ArgumentNullException(nameof(suggestionId), "Property is not nullable for class ImplementationInstructions.");

            if (pageUrl.IsSet && pageUrl.Value == null)
                throw new ArgumentNullException(nameof(pageUrl), "Property is not nullable for class ImplementationInstructions.");

            if (anchorText.IsSet && anchorText.Value == null)
                throw new ArgumentNullException(nameof(anchorText), "Property is not nullable for class ImplementationInstructions.");

            if (targetUrl.IsSet && targetUrl.Value == null)
                throw new ArgumentNullException(nameof(targetUrl), "Property is not nullable for class ImplementationInstructions.");

            if (context.IsSet && context.Value == null)
                throw new ArgumentNullException(nameof(context), "Property is not nullable for class ImplementationInstructions.");

            if (instructions.IsSet && instructions.Value == null)
                throw new ArgumentNullException(nameof(instructions), "Property is not nullable for class ImplementationInstructions.");

            return new ImplementationInstructions(suggestionId.Value!, pageUrl.Value!, anchorText.Value!, targetUrl.Value!, context.Value!, instructions.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ImplementationInstructions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="implementationInstructions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImplementationInstructions implementationInstructions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, implementationInstructions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImplementationInstructions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="implementationInstructions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImplementationInstructions implementationInstructions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (implementationInstructions.SuggestionId == null)
                throw new ArgumentNullException(nameof(implementationInstructions.SuggestionId), "Property is required for class ImplementationInstructions.");

            if (implementationInstructions.PageUrl == null)
                throw new ArgumentNullException(nameof(implementationInstructions.PageUrl), "Property is required for class ImplementationInstructions.");

            if (implementationInstructions.AnchorText == null)
                throw new ArgumentNullException(nameof(implementationInstructions.AnchorText), "Property is required for class ImplementationInstructions.");

            if (implementationInstructions.TargetUrl == null)
                throw new ArgumentNullException(nameof(implementationInstructions.TargetUrl), "Property is required for class ImplementationInstructions.");

            if (implementationInstructions.Context == null)
                throw new ArgumentNullException(nameof(implementationInstructions.Context), "Property is required for class ImplementationInstructions.");

            if (implementationInstructions.Instructions == null)
                throw new ArgumentNullException(nameof(implementationInstructions.Instructions), "Property is required for class ImplementationInstructions.");

            writer.WriteString("suggestionId", implementationInstructions.SuggestionId);

            writer.WriteString("pageUrl", implementationInstructions.PageUrl);

            writer.WriteString("anchorText", implementationInstructions.AnchorText);

            writer.WriteString("targetUrl", implementationInstructions.TargetUrl);

            writer.WriteString("context", implementationInstructions.Context);

            writer.WritePropertyName("instructions");
            JsonSerializer.Serialize(writer, implementationInstructions.Instructions, jsonSerializerOptions);
        }
    }
}
