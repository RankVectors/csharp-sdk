// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// CreateProjectRequest
    /// </summary>
    public partial class CreateProjectRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProjectRequest" /> class.
        /// </summary>
        /// <param name="name">Project name</param>
        /// <param name="domain">Website domain URL</param>
        /// <param name="prompt">Natural language prompt for crawling</param>
        /// <param name="searchQuery">Search query for targeted crawling</param>
        /// <param name="sitemapMode">How to handle sitemaps (default to SitemapModeEnum.Include)</param>
        /// <param name="includeSubdomains">Whether to include subdomains (default to true)</param>
        /// <param name="ignoreQueryParams">Whether to ignore URL query parameters (default to true)</param>
        /// <param name="maxDiscoveryDepth">Maximum crawl depth</param>
        /// <param name="excludePaths">Paths to exclude from crawling</param>
        /// <param name="includePaths">Specific paths to include</param>
        /// <param name="crawlEntireDomain">Whether to crawl the entire domain (default to false)</param>
        /// <param name="allowExternalLinks">Whether to allow external links (default to false)</param>
        /// <param name="maxPages">Maximum number of pages to crawl (default to 100)</param>
        /// <param name="crawlDelay">Delay between crawl requests (ms)</param>
        /// <param name="crawlMaxConcurrency">Maximum concurrent crawl requests</param>
        /// <param name="onlyMainContent">Whether to extract only main content (default to true)</param>
        /// <param name="customHeaders">Custom headers for crawling</param>
        /// <param name="waitFor">Wait time for page load (ms) (default to 0)</param>
        /// <param name="blockAds">Whether to block ads (default to true)</param>
        /// <param name="proxyMode">Proxy mode for crawling (default to ProxyModeEnum.Auto)</param>
        /// <param name="useReranking">Whether to use AI reranking (default to true)</param>
        /// <param name="enableChangeTracking">Whether to enable change tracking (default to false)</param>
        [JsonConstructor]
        public CreateProjectRequest(string name, string domain, Option<string?> prompt = default, Option<string?> searchQuery = default, Option<SitemapModeEnum?> sitemapMode = default, Option<bool?> includeSubdomains = default, Option<bool?> ignoreQueryParams = default, Option<int?> maxDiscoveryDepth = default, Option<List<string>?> excludePaths = default, Option<List<string>?> includePaths = default, Option<bool?> crawlEntireDomain = default, Option<bool?> allowExternalLinks = default, Option<int?> maxPages = default, Option<int?> crawlDelay = default, Option<int?> crawlMaxConcurrency = default, Option<bool?> onlyMainContent = default, Option<Dictionary<string, string>?> customHeaders = default, Option<int?> waitFor = default, Option<bool?> blockAds = default, Option<ProxyModeEnum?> proxyMode = default, Option<bool?> useReranking = default, Option<bool?> enableChangeTracking = default)
        {
            Name = name;
            Domain = domain;
            PromptOption = prompt;
            SearchQueryOption = searchQuery;
            SitemapModeOption = sitemapMode;
            IncludeSubdomainsOption = includeSubdomains;
            IgnoreQueryParamsOption = ignoreQueryParams;
            MaxDiscoveryDepthOption = maxDiscoveryDepth;
            ExcludePathsOption = excludePaths;
            IncludePathsOption = includePaths;
            CrawlEntireDomainOption = crawlEntireDomain;
            AllowExternalLinksOption = allowExternalLinks;
            MaxPagesOption = maxPages;
            CrawlDelayOption = crawlDelay;
            CrawlMaxConcurrencyOption = crawlMaxConcurrency;
            OnlyMainContentOption = onlyMainContent;
            CustomHeadersOption = customHeaders;
            WaitForOption = waitFor;
            BlockAdsOption = blockAds;
            ProxyModeOption = proxyMode;
            UseRerankingOption = useReranking;
            EnableChangeTrackingOption = enableChangeTracking;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// How to handle sitemaps
        /// </summary>
        /// <value>How to handle sitemaps</value>
        public enum SitemapModeEnum
        {
            /// <summary>
            /// Enum Include for value: include
            /// </summary>
            Include = 1,

            /// <summary>
            /// Enum Exclude for value: exclude
            /// </summary>
            Exclude = 2,

            /// <summary>
            /// Enum Only for value: only
            /// </summary>
            Only = 3
        }

        /// <summary>
        /// Returns a <see cref="SitemapModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SitemapModeEnum SitemapModeEnumFromString(string value)
        {
            if (value.Equals("include"))
                return SitemapModeEnum.Include;

            if (value.Equals("exclude"))
                return SitemapModeEnum.Exclude;

            if (value.Equals("only"))
                return SitemapModeEnum.Only;

            throw new NotImplementedException($"Could not convert value to type SitemapModeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SitemapModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SitemapModeEnum? SitemapModeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("include"))
                return SitemapModeEnum.Include;

            if (value.Equals("exclude"))
                return SitemapModeEnum.Exclude;

            if (value.Equals("only"))
                return SitemapModeEnum.Only;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SitemapModeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SitemapModeEnumToJsonValue(SitemapModeEnum? value)
        {
            if (value == SitemapModeEnum.Include)
                return "include";

            if (value == SitemapModeEnum.Exclude)
                return "exclude";

            if (value == SitemapModeEnum.Only)
                return "only";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SitemapMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SitemapModeEnum?> SitemapModeOption { get; private set; }

        /// <summary>
        /// How to handle sitemaps
        /// </summary>
        /// <value>How to handle sitemaps</value>
        /* <example>include</example> */
        [JsonPropertyName("sitemapMode")]
        public SitemapModeEnum? SitemapMode { get { return this.SitemapModeOption; } set { this.SitemapModeOption = new(value); } }

        /// <summary>
        /// Proxy mode for crawling
        /// </summary>
        /// <value>Proxy mode for crawling</value>
        public enum ProxyModeEnum
        {
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            Auto = 1,

            /// <summary>
            /// Enum Residential for value: residential
            /// </summary>
            Residential = 2,

            /// <summary>
            /// Enum Datacenter for value: datacenter
            /// </summary>
            Datacenter = 3
        }

        /// <summary>
        /// Returns a <see cref="ProxyModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ProxyModeEnum ProxyModeEnumFromString(string value)
        {
            if (value.Equals("auto"))
                return ProxyModeEnum.Auto;

            if (value.Equals("residential"))
                return ProxyModeEnum.Residential;

            if (value.Equals("datacenter"))
                return ProxyModeEnum.Datacenter;

            throw new NotImplementedException($"Could not convert value to type ProxyModeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ProxyModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProxyModeEnum? ProxyModeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("auto"))
                return ProxyModeEnum.Auto;

            if (value.Equals("residential"))
                return ProxyModeEnum.Residential;

            if (value.Equals("datacenter"))
                return ProxyModeEnum.Datacenter;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ProxyModeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ProxyModeEnumToJsonValue(ProxyModeEnum? value)
        {
            if (value == ProxyModeEnum.Auto)
                return "auto";

            if (value == ProxyModeEnum.Residential)
                return "residential";

            if (value == ProxyModeEnum.Datacenter)
                return "datacenter";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ProxyMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ProxyModeEnum?> ProxyModeOption { get; private set; }

        /// <summary>
        /// Proxy mode for crawling
        /// </summary>
        /// <value>Proxy mode for crawling</value>
        /* <example>auto</example> */
        [JsonPropertyName("proxyMode")]
        public ProxyModeEnum? ProxyMode { get { return this.ProxyModeOption; } set { this.ProxyModeOption = new(value); } }

        /// <summary>
        /// Project name
        /// </summary>
        /// <value>Project name</value>
        /* <example>My Website</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Website domain URL
        /// </summary>
        /// <value>Website domain URL</value>
        /* <example>https://example.com</example> */
        [JsonPropertyName("domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Used to track the state of Prompt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PromptOption { get; private set; }

        /// <summary>
        /// Natural language prompt for crawling
        /// </summary>
        /// <value>Natural language prompt for crawling</value>
        /* <example>Only crawl blog posts and documentation</example> */
        [JsonPropertyName("prompt")]
        public string? Prompt { get { return this.PromptOption; } set { this.PromptOption = new(value); } }

        /// <summary>
        /// Used to track the state of SearchQuery
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SearchQueryOption { get; private set; }

        /// <summary>
        /// Search query for targeted crawling
        /// </summary>
        /// <value>Search query for targeted crawling</value>
        /* <example>SEO optimization</example> */
        [JsonPropertyName("searchQuery")]
        public string? SearchQuery { get { return this.SearchQueryOption; } set { this.SearchQueryOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncludeSubdomains
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IncludeSubdomainsOption { get; private set; }

        /// <summary>
        /// Whether to include subdomains
        /// </summary>
        /// <value>Whether to include subdomains</value>
        /* <example>true</example> */
        [JsonPropertyName("includeSubdomains")]
        public bool? IncludeSubdomains { get { return this.IncludeSubdomainsOption; } set { this.IncludeSubdomainsOption = new(value); } }

        /// <summary>
        /// Used to track the state of IgnoreQueryParams
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IgnoreQueryParamsOption { get; private set; }

        /// <summary>
        /// Whether to ignore URL query parameters
        /// </summary>
        /// <value>Whether to ignore URL query parameters</value>
        /* <example>true</example> */
        [JsonPropertyName("ignoreQueryParams")]
        public bool? IgnoreQueryParams { get { return this.IgnoreQueryParamsOption; } set { this.IgnoreQueryParamsOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxDiscoveryDepth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaxDiscoveryDepthOption { get; private set; }

        /// <summary>
        /// Maximum crawl depth
        /// </summary>
        /// <value>Maximum crawl depth</value>
        /* <example>3</example> */
        [JsonPropertyName("maxDiscoveryDepth")]
        public int? MaxDiscoveryDepth { get { return this.MaxDiscoveryDepthOption; } set { this.MaxDiscoveryDepthOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExcludePaths
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ExcludePathsOption { get; private set; }

        /// <summary>
        /// Paths to exclude from crawling
        /// </summary>
        /// <value>Paths to exclude from crawling</value>
        /* <example>[&quot;/admin&quot;,&quot;/private&quot;]</example> */
        [JsonPropertyName("excludePaths")]
        public List<string>? ExcludePaths { get { return this.ExcludePathsOption; } set { this.ExcludePathsOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncludePaths
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> IncludePathsOption { get; private set; }

        /// <summary>
        /// Specific paths to include
        /// </summary>
        /// <value>Specific paths to include</value>
        /* <example>[&quot;/blog&quot;,&quot;/docs&quot;]</example> */
        [JsonPropertyName("includePaths")]
        public List<string>? IncludePaths { get { return this.IncludePathsOption; } set { this.IncludePathsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CrawlEntireDomain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CrawlEntireDomainOption { get; private set; }

        /// <summary>
        /// Whether to crawl the entire domain
        /// </summary>
        /// <value>Whether to crawl the entire domain</value>
        /* <example>false</example> */
        [JsonPropertyName("crawlEntireDomain")]
        public bool? CrawlEntireDomain { get { return this.CrawlEntireDomainOption; } set { this.CrawlEntireDomainOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowExternalLinks
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowExternalLinksOption { get; private set; }

        /// <summary>
        /// Whether to allow external links
        /// </summary>
        /// <value>Whether to allow external links</value>
        /* <example>false</example> */
        [JsonPropertyName("allowExternalLinks")]
        public bool? AllowExternalLinks { get { return this.AllowExternalLinksOption; } set { this.AllowExternalLinksOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxPages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaxPagesOption { get; private set; }

        /// <summary>
        /// Maximum number of pages to crawl
        /// </summary>
        /// <value>Maximum number of pages to crawl</value>
        /* <example>100</example> */
        [JsonPropertyName("maxPages")]
        public int? MaxPages { get { return this.MaxPagesOption; } set { this.MaxPagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of CrawlDelay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CrawlDelayOption { get; private set; }

        /// <summary>
        /// Delay between crawl requests (ms)
        /// </summary>
        /// <value>Delay between crawl requests (ms)</value>
        /* <example>1000</example> */
        [JsonPropertyName("crawlDelay")]
        public int? CrawlDelay { get { return this.CrawlDelayOption; } set { this.CrawlDelayOption = new(value); } }

        /// <summary>
        /// Used to track the state of CrawlMaxConcurrency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CrawlMaxConcurrencyOption { get; private set; }

        /// <summary>
        /// Maximum concurrent crawl requests
        /// </summary>
        /// <value>Maximum concurrent crawl requests</value>
        /* <example>5</example> */
        [JsonPropertyName("crawlMaxConcurrency")]
        public int? CrawlMaxConcurrency { get { return this.CrawlMaxConcurrencyOption; } set { this.CrawlMaxConcurrencyOption = new(value); } }

        /// <summary>
        /// Used to track the state of OnlyMainContent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OnlyMainContentOption { get; private set; }

        /// <summary>
        /// Whether to extract only main content
        /// </summary>
        /// <value>Whether to extract only main content</value>
        /* <example>true</example> */
        [JsonPropertyName("onlyMainContent")]
        public bool? OnlyMainContent { get { return this.OnlyMainContentOption; } set { this.OnlyMainContentOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomHeaders
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> CustomHeadersOption { get; private set; }

        /// <summary>
        /// Custom headers for crawling
        /// </summary>
        /// <value>Custom headers for crawling</value>
        [JsonPropertyName("customHeaders")]
        public Dictionary<string, string>? CustomHeaders { get { return this.CustomHeadersOption; } set { this.CustomHeadersOption = new(value); } }

        /// <summary>
        /// Used to track the state of WaitFor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WaitForOption { get; private set; }

        /// <summary>
        /// Wait time for page load (ms)
        /// </summary>
        /// <value>Wait time for page load (ms)</value>
        /* <example>0</example> */
        [JsonPropertyName("waitFor")]
        public int? WaitFor { get { return this.WaitForOption; } set { this.WaitForOption = new(value); } }

        /// <summary>
        /// Used to track the state of BlockAds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> BlockAdsOption { get; private set; }

        /// <summary>
        /// Whether to block ads
        /// </summary>
        /// <value>Whether to block ads</value>
        /* <example>true</example> */
        [JsonPropertyName("blockAds")]
        public bool? BlockAds { get { return this.BlockAdsOption; } set { this.BlockAdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of UseReranking
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseRerankingOption { get; private set; }

        /// <summary>
        /// Whether to use AI reranking
        /// </summary>
        /// <value>Whether to use AI reranking</value>
        /* <example>true</example> */
        [JsonPropertyName("useReranking")]
        public bool? UseReranking { get { return this.UseRerankingOption; } set { this.UseRerankingOption = new(value); } }

        /// <summary>
        /// Used to track the state of EnableChangeTracking
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableChangeTrackingOption { get; private set; }

        /// <summary>
        /// Whether to enable change tracking
        /// </summary>
        /// <value>Whether to enable change tracking</value>
        /* <example>false</example> */
        [JsonPropertyName("enableChangeTracking")]
        public bool? EnableChangeTracking { get { return this.EnableChangeTrackingOption; } set { this.EnableChangeTrackingOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateProjectRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  SearchQuery: ").Append(SearchQuery).Append("\n");
            sb.Append("  SitemapMode: ").Append(SitemapMode).Append("\n");
            sb.Append("  IncludeSubdomains: ").Append(IncludeSubdomains).Append("\n");
            sb.Append("  IgnoreQueryParams: ").Append(IgnoreQueryParams).Append("\n");
            sb.Append("  MaxDiscoveryDepth: ").Append(MaxDiscoveryDepth).Append("\n");
            sb.Append("  ExcludePaths: ").Append(ExcludePaths).Append("\n");
            sb.Append("  IncludePaths: ").Append(IncludePaths).Append("\n");
            sb.Append("  CrawlEntireDomain: ").Append(CrawlEntireDomain).Append("\n");
            sb.Append("  AllowExternalLinks: ").Append(AllowExternalLinks).Append("\n");
            sb.Append("  MaxPages: ").Append(MaxPages).Append("\n");
            sb.Append("  CrawlDelay: ").Append(CrawlDelay).Append("\n");
            sb.Append("  CrawlMaxConcurrency: ").Append(CrawlMaxConcurrency).Append("\n");
            sb.Append("  OnlyMainContent: ").Append(OnlyMainContent).Append("\n");
            sb.Append("  CustomHeaders: ").Append(CustomHeaders).Append("\n");
            sb.Append("  WaitFor: ").Append(WaitFor).Append("\n");
            sb.Append("  BlockAds: ").Append(BlockAds).Append("\n");
            sb.Append("  ProxyMode: ").Append(ProxyMode).Append("\n");
            sb.Append("  UseReranking: ").Append(UseReranking).Append("\n");
            sb.Append("  EnableChangeTracking: ").Append(EnableChangeTracking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateProjectRequest" />
    /// </summary>
    public class CreateProjectRequestJsonConverter : JsonConverter<CreateProjectRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateProjectRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateProjectRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> domain = default;
            Option<string?> prompt = default;
            Option<string?> searchQuery = default;
            Option<CreateProjectRequest.SitemapModeEnum?> sitemapMode = default;
            Option<bool?> includeSubdomains = default;
            Option<bool?> ignoreQueryParams = default;
            Option<int?> maxDiscoveryDepth = default;
            Option<List<string>?> excludePaths = default;
            Option<List<string>?> includePaths = default;
            Option<bool?> crawlEntireDomain = default;
            Option<bool?> allowExternalLinks = default;
            Option<int?> maxPages = default;
            Option<int?> crawlDelay = default;
            Option<int?> crawlMaxConcurrency = default;
            Option<bool?> onlyMainContent = default;
            Option<Dictionary<string, string>?> customHeaders = default;
            Option<int?> waitFor = default;
            Option<bool?> blockAds = default;
            Option<CreateProjectRequest.ProxyModeEnum?> proxyMode = default;
            Option<bool?> useReranking = default;
            Option<bool?> enableChangeTracking = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "domain":
                            domain = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "prompt":
                            prompt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "searchQuery":
                            searchQuery = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sitemapMode":
                            string? sitemapModeRawValue = utf8JsonReader.GetString();
                            if (sitemapModeRawValue != null)
                                sitemapMode = new Option<CreateProjectRequest.SitemapModeEnum?>(CreateProjectRequest.SitemapModeEnumFromStringOrDefault(sitemapModeRawValue));
                            break;
                        case "includeSubdomains":
                            includeSubdomains = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ignoreQueryParams":
                            ignoreQueryParams = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "maxDiscoveryDepth":
                            maxDiscoveryDepth = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "excludePaths":
                            excludePaths = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "includePaths":
                            includePaths = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "crawlEntireDomain":
                            crawlEntireDomain = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allowExternalLinks":
                            allowExternalLinks = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "maxPages":
                            maxPages = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "crawlDelay":
                            crawlDelay = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "crawlMaxConcurrency":
                            crawlMaxConcurrency = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "onlyMainContent":
                            onlyMainContent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "customHeaders":
                            customHeaders = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "waitFor":
                            waitFor = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "blockAds":
                            blockAds = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "proxyMode":
                            string? proxyModeRawValue = utf8JsonReader.GetString();
                            if (proxyModeRawValue != null)
                                proxyMode = new Option<CreateProjectRequest.ProxyModeEnum?>(CreateProjectRequest.ProxyModeEnumFromStringOrDefault(proxyModeRawValue));
                            break;
                        case "useReranking":
                            useReranking = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "enableChangeTracking":
                            enableChangeTracking = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateProjectRequest.", nameof(name));

            if (!domain.IsSet)
                throw new ArgumentException("Property is required for class CreateProjectRequest.", nameof(domain));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateProjectRequest.");

            if (domain.IsSet && domain.Value == null)
                throw new ArgumentNullException(nameof(domain), "Property is not nullable for class CreateProjectRequest.");

            if (prompt.IsSet && prompt.Value == null)
                throw new ArgumentNullException(nameof(prompt), "Property is not nullable for class CreateProjectRequest.");

            if (searchQuery.IsSet && searchQuery.Value == null)
                throw new ArgumentNullException(nameof(searchQuery), "Property is not nullable for class CreateProjectRequest.");

            if (sitemapMode.IsSet && sitemapMode.Value == null)
                throw new ArgumentNullException(nameof(sitemapMode), "Property is not nullable for class CreateProjectRequest.");

            if (includeSubdomains.IsSet && includeSubdomains.Value == null)
                throw new ArgumentNullException(nameof(includeSubdomains), "Property is not nullable for class CreateProjectRequest.");

            if (ignoreQueryParams.IsSet && ignoreQueryParams.Value == null)
                throw new ArgumentNullException(nameof(ignoreQueryParams), "Property is not nullable for class CreateProjectRequest.");

            if (maxDiscoveryDepth.IsSet && maxDiscoveryDepth.Value == null)
                throw new ArgumentNullException(nameof(maxDiscoveryDepth), "Property is not nullable for class CreateProjectRequest.");

            if (excludePaths.IsSet && excludePaths.Value == null)
                throw new ArgumentNullException(nameof(excludePaths), "Property is not nullable for class CreateProjectRequest.");

            if (includePaths.IsSet && includePaths.Value == null)
                throw new ArgumentNullException(nameof(includePaths), "Property is not nullable for class CreateProjectRequest.");

            if (crawlEntireDomain.IsSet && crawlEntireDomain.Value == null)
                throw new ArgumentNullException(nameof(crawlEntireDomain), "Property is not nullable for class CreateProjectRequest.");

            if (allowExternalLinks.IsSet && allowExternalLinks.Value == null)
                throw new ArgumentNullException(nameof(allowExternalLinks), "Property is not nullable for class CreateProjectRequest.");

            if (maxPages.IsSet && maxPages.Value == null)
                throw new ArgumentNullException(nameof(maxPages), "Property is not nullable for class CreateProjectRequest.");

            if (crawlDelay.IsSet && crawlDelay.Value == null)
                throw new ArgumentNullException(nameof(crawlDelay), "Property is not nullable for class CreateProjectRequest.");

            if (crawlMaxConcurrency.IsSet && crawlMaxConcurrency.Value == null)
                throw new ArgumentNullException(nameof(crawlMaxConcurrency), "Property is not nullable for class CreateProjectRequest.");

            if (onlyMainContent.IsSet && onlyMainContent.Value == null)
                throw new ArgumentNullException(nameof(onlyMainContent), "Property is not nullable for class CreateProjectRequest.");

            if (customHeaders.IsSet && customHeaders.Value == null)
                throw new ArgumentNullException(nameof(customHeaders), "Property is not nullable for class CreateProjectRequest.");

            if (waitFor.IsSet && waitFor.Value == null)
                throw new ArgumentNullException(nameof(waitFor), "Property is not nullable for class CreateProjectRequest.");

            if (blockAds.IsSet && blockAds.Value == null)
                throw new ArgumentNullException(nameof(blockAds), "Property is not nullable for class CreateProjectRequest.");

            if (proxyMode.IsSet && proxyMode.Value == null)
                throw new ArgumentNullException(nameof(proxyMode), "Property is not nullable for class CreateProjectRequest.");

            if (useReranking.IsSet && useReranking.Value == null)
                throw new ArgumentNullException(nameof(useReranking), "Property is not nullable for class CreateProjectRequest.");

            if (enableChangeTracking.IsSet && enableChangeTracking.Value == null)
                throw new ArgumentNullException(nameof(enableChangeTracking), "Property is not nullable for class CreateProjectRequest.");

            return new CreateProjectRequest(name.Value!, domain.Value!, prompt, searchQuery, sitemapMode, includeSubdomains, ignoreQueryParams, maxDiscoveryDepth, excludePaths, includePaths, crawlEntireDomain, allowExternalLinks, maxPages, crawlDelay, crawlMaxConcurrency, onlyMainContent, customHeaders, waitFor, blockAds, proxyMode, useReranking, enableChangeTracking);
        }

        /// <summary>
        /// Serializes a <see cref="CreateProjectRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createProjectRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateProjectRequest createProjectRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createProjectRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateProjectRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createProjectRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateProjectRequest createProjectRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createProjectRequest.Name == null)
                throw new ArgumentNullException(nameof(createProjectRequest.Name), "Property is required for class CreateProjectRequest.");

            if (createProjectRequest.Domain == null)
                throw new ArgumentNullException(nameof(createProjectRequest.Domain), "Property is required for class CreateProjectRequest.");

            if (createProjectRequest.PromptOption.IsSet && createProjectRequest.Prompt == null)
                throw new ArgumentNullException(nameof(createProjectRequest.Prompt), "Property is required for class CreateProjectRequest.");

            if (createProjectRequest.SearchQueryOption.IsSet && createProjectRequest.SearchQuery == null)
                throw new ArgumentNullException(nameof(createProjectRequest.SearchQuery), "Property is required for class CreateProjectRequest.");

            if (createProjectRequest.ExcludePathsOption.IsSet && createProjectRequest.ExcludePaths == null)
                throw new ArgumentNullException(nameof(createProjectRequest.ExcludePaths), "Property is required for class CreateProjectRequest.");

            if (createProjectRequest.IncludePathsOption.IsSet && createProjectRequest.IncludePaths == null)
                throw new ArgumentNullException(nameof(createProjectRequest.IncludePaths), "Property is required for class CreateProjectRequest.");

            if (createProjectRequest.CustomHeadersOption.IsSet && createProjectRequest.CustomHeaders == null)
                throw new ArgumentNullException(nameof(createProjectRequest.CustomHeaders), "Property is required for class CreateProjectRequest.");

            writer.WriteString("name", createProjectRequest.Name);

            writer.WriteString("domain", createProjectRequest.Domain);

            if (createProjectRequest.PromptOption.IsSet)
                writer.WriteString("prompt", createProjectRequest.Prompt);

            if (createProjectRequest.SearchQueryOption.IsSet)
                writer.WriteString("searchQuery", createProjectRequest.SearchQuery);

            var sitemapModeRawValue = CreateProjectRequest.SitemapModeEnumToJsonValue(createProjectRequest.SitemapModeOption.Value!.Value);
            writer.WriteString("sitemapMode", sitemapModeRawValue);
            if (createProjectRequest.IncludeSubdomainsOption.IsSet)
                writer.WriteBoolean("includeSubdomains", createProjectRequest.IncludeSubdomainsOption.Value!.Value);

            if (createProjectRequest.IgnoreQueryParamsOption.IsSet)
                writer.WriteBoolean("ignoreQueryParams", createProjectRequest.IgnoreQueryParamsOption.Value!.Value);

            if (createProjectRequest.MaxDiscoveryDepthOption.IsSet)
                writer.WriteNumber("maxDiscoveryDepth", createProjectRequest.MaxDiscoveryDepthOption.Value!.Value);

            if (createProjectRequest.ExcludePathsOption.IsSet)
            {
                writer.WritePropertyName("excludePaths");
                JsonSerializer.Serialize(writer, createProjectRequest.ExcludePaths, jsonSerializerOptions);
            }
            if (createProjectRequest.IncludePathsOption.IsSet)
            {
                writer.WritePropertyName("includePaths");
                JsonSerializer.Serialize(writer, createProjectRequest.IncludePaths, jsonSerializerOptions);
            }
            if (createProjectRequest.CrawlEntireDomainOption.IsSet)
                writer.WriteBoolean("crawlEntireDomain", createProjectRequest.CrawlEntireDomainOption.Value!.Value);

            if (createProjectRequest.AllowExternalLinksOption.IsSet)
                writer.WriteBoolean("allowExternalLinks", createProjectRequest.AllowExternalLinksOption.Value!.Value);

            if (createProjectRequest.MaxPagesOption.IsSet)
                writer.WriteNumber("maxPages", createProjectRequest.MaxPagesOption.Value!.Value);

            if (createProjectRequest.CrawlDelayOption.IsSet)
                writer.WriteNumber("crawlDelay", createProjectRequest.CrawlDelayOption.Value!.Value);

            if (createProjectRequest.CrawlMaxConcurrencyOption.IsSet)
                writer.WriteNumber("crawlMaxConcurrency", createProjectRequest.CrawlMaxConcurrencyOption.Value!.Value);

            if (createProjectRequest.OnlyMainContentOption.IsSet)
                writer.WriteBoolean("onlyMainContent", createProjectRequest.OnlyMainContentOption.Value!.Value);

            if (createProjectRequest.CustomHeadersOption.IsSet)
            {
                writer.WritePropertyName("customHeaders");
                JsonSerializer.Serialize(writer, createProjectRequest.CustomHeaders, jsonSerializerOptions);
            }
            if (createProjectRequest.WaitForOption.IsSet)
                writer.WriteNumber("waitFor", createProjectRequest.WaitForOption.Value!.Value);

            if (createProjectRequest.BlockAdsOption.IsSet)
                writer.WriteBoolean("blockAds", createProjectRequest.BlockAdsOption.Value!.Value);

            var proxyModeRawValue = CreateProjectRequest.ProxyModeEnumToJsonValue(createProjectRequest.ProxyModeOption.Value!.Value);
            writer.WriteString("proxyMode", proxyModeRawValue);
            if (createProjectRequest.UseRerankingOption.IsSet)
                writer.WriteBoolean("useReranking", createProjectRequest.UseRerankingOption.Value!.Value);

            if (createProjectRequest.EnableChangeTrackingOption.IsSet)
                writer.WriteBoolean("enableChangeTracking", createProjectRequest.EnableChangeTrackingOption.Value!.Value);
        }
    }
}
