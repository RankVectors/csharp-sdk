// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// Implementation
    /// </summary>
    public partial class Implementation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Implementation" /> class.
        /// </summary>
        /// <param name="id">Unique implementation identifier</param>
        /// <param name="status">Implementation status</param>
        /// <param name="platform">Platform used</param>
        /// <param name="creditsUsed">Credits consumed</param>
        /// <param name="createdAt">Implementation start timestamp</param>
        /// <param name="suggestion">suggestion</param>
        /// <param name="implementationMethod">Implementation method</param>
        /// <param name="completedAt">Implementation completion timestamp</param>
        /// <param name="metadata">Platform-specific metadata</param>
        /// <param name="rollbacks">Rollback history</param>
        [JsonConstructor]
        public Implementation(string id, StatusEnum status, PlatformEnum platform, decimal creditsUsed, DateTime createdAt, Suggestion suggestion, Option<ImplementationMethodEnum?> implementationMethod = default, Option<DateTime?> completedAt = default, Option<Dictionary<string, Object>?> metadata = default, Option<List<Rollback>?> rollbacks = default)
        {
            Id = id;
            Status = status;
            Platform = platform;
            CreditsUsed = creditsUsed;
            CreatedAt = createdAt;
            Suggestion = suggestion;
            ImplementationMethodOption = implementationMethod;
            CompletedAtOption = completedAt;
            MetadataOption = metadata;
            RollbacksOption = rollbacks;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Implementation status
        /// </summary>
        /// <value>Implementation status</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 1,

            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            InProgress = 2,

            /// <summary>
            /// Enum Success for value: success
            /// </summary>
            Success = 3,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            Failed = 4,

            /// <summary>
            /// Enum RolledBack for value: rolled_back
            /// </summary>
            RolledBack = 5
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("in_progress"))
                return StatusEnum.InProgress;

            if (value.Equals("success"))
                return StatusEnum.Success;

            if (value.Equals("failed"))
                return StatusEnum.Failed;

            if (value.Equals("rolled_back"))
                return StatusEnum.RolledBack;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("in_progress"))
                return StatusEnum.InProgress;

            if (value.Equals("success"))
                return StatusEnum.Success;

            if (value.Equals("failed"))
                return StatusEnum.Failed;

            if (value.Equals("rolled_back"))
                return StatusEnum.RolledBack;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Pending)
                return "pending";

            if (value == StatusEnum.InProgress)
                return "in_progress";

            if (value == StatusEnum.Success)
                return "success";

            if (value == StatusEnum.Failed)
                return "failed";

            if (value == StatusEnum.RolledBack)
                return "rolled_back";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Implementation status
        /// </summary>
        /// <value>Implementation status</value>
        /* <example>success</example> */
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Platform used
        /// </summary>
        /// <value>Platform used</value>
        public enum PlatformEnum
        {
            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            Custom = 1
        }

        /// <summary>
        /// Returns a <see cref="PlatformEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PlatformEnum PlatformEnumFromString(string value)
        {
            if (value.Equals("custom"))
                return PlatformEnum.Custom;

            throw new NotImplementedException($"Could not convert value to type PlatformEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PlatformEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PlatformEnum? PlatformEnumFromStringOrDefault(string value)
        {
            if (value.Equals("custom"))
                return PlatformEnum.Custom;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PlatformEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PlatformEnumToJsonValue(PlatformEnum value)
        {
            if (value == PlatformEnum.Custom)
                return "custom";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Platform used
        /// </summary>
        /// <value>Platform used</value>
        /* <example>custom</example> */
        [JsonPropertyName("platform")]
        public PlatformEnum Platform { get; set; }

        /// <summary>
        /// Implementation method
        /// </summary>
        /// <value>Implementation method</value>
        public enum ImplementationMethodEnum
        {
            /// <summary>
            /// Enum Api for value: api
            /// </summary>
            Api = 1,

            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            Manual = 2
        }

        /// <summary>
        /// Returns a <see cref="ImplementationMethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ImplementationMethodEnum ImplementationMethodEnumFromString(string value)
        {
            if (value.Equals("api"))
                return ImplementationMethodEnum.Api;

            if (value.Equals("manual"))
                return ImplementationMethodEnum.Manual;

            throw new NotImplementedException($"Could not convert value to type ImplementationMethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ImplementationMethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ImplementationMethodEnum? ImplementationMethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("api"))
                return ImplementationMethodEnum.Api;

            if (value.Equals("manual"))
                return ImplementationMethodEnum.Manual;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ImplementationMethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ImplementationMethodEnumToJsonValue(ImplementationMethodEnum? value)
        {
            if (value == ImplementationMethodEnum.Api)
                return "api";

            if (value == ImplementationMethodEnum.Manual)
                return "manual";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ImplementationMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ImplementationMethodEnum?> ImplementationMethodOption { get; private set; }

        /// <summary>
        /// Implementation method
        /// </summary>
        /// <value>Implementation method</value>
        /* <example>api</example> */
        [JsonPropertyName("implementationMethod")]
        public ImplementationMethodEnum? ImplementationMethod { get { return this.ImplementationMethodOption; } set { this.ImplementationMethodOption = new(value); } }

        /// <summary>
        /// Unique implementation identifier
        /// </summary>
        /// <value>Unique implementation identifier</value>
        /* <example>impl-123</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Credits consumed
        /// </summary>
        /// <value>Credits consumed</value>
        /* <example>1</example> */
        [JsonPropertyName("creditsUsed")]
        public decimal CreditsUsed { get; set; }

        /// <summary>
        /// Implementation start timestamp
        /// </summary>
        /// <value>Implementation start timestamp</value>
        /* <example>2025-01-15T10:00Z</example> */
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Suggestion
        /// </summary>
        [JsonPropertyName("suggestion")]
        public Suggestion Suggestion { get; set; }

        /// <summary>
        /// Used to track the state of CompletedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CompletedAtOption { get; private set; }

        /// <summary>
        /// Implementation completion timestamp
        /// </summary>
        /// <value>Implementation completion timestamp</value>
        /* <example>2025-01-15T10:00:05Z</example> */
        [JsonPropertyName("completedAt")]
        public DateTime? CompletedAt { get { return this.CompletedAtOption; } set { this.CompletedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> MetadataOption { get; private set; }

        /// <summary>
        /// Platform-specific metadata
        /// </summary>
        /// <value>Platform-specific metadata</value>
        /* <example>{&quot;postId&quot;:456,&quot;postUrl&quot;:&quot;https://example.com/source&quot;}</example> */
        [JsonPropertyName("metadata")]
        public Dictionary<string, Object>? Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Rollbacks
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Rollback>?> RollbacksOption { get; private set; }

        /// <summary>
        /// Rollback history
        /// </summary>
        /// <value>Rollback history</value>
        [JsonPropertyName("rollbacks")]
        public List<Rollback>? Rollbacks { get { return this.RollbacksOption; } set { this.RollbacksOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Implementation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  CreditsUsed: ").Append(CreditsUsed).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Suggestion: ").Append(Suggestion).Append("\n");
            sb.Append("  ImplementationMethod: ").Append(ImplementationMethod).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Rollbacks: ").Append(Rollbacks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Implementation" />
    /// </summary>
    public class ImplementationJsonConverter : JsonConverter<Implementation>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CompletedAt
        /// </summary>
        public static string CompletedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Implementation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Implementation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<Implementation.StatusEnum?> status = default;
            Option<Implementation.PlatformEnum?> platform = default;
            Option<decimal?> creditsUsed = default;
            Option<DateTime?> createdAt = default;
            Option<Suggestion?> suggestion = default;
            Option<Implementation.ImplementationMethodEnum?> implementationMethod = default;
            Option<DateTime?> completedAt = default;
            Option<Dictionary<string, Object>?> metadata = default;
            Option<List<Rollback>?> rollbacks = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<Implementation.StatusEnum?>(Implementation.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "platform":
                            string? platformRawValue = utf8JsonReader.GetString();
                            if (platformRawValue != null)
                                platform = new Option<Implementation.PlatformEnum?>(Implementation.PlatformEnumFromStringOrDefault(platformRawValue));
                            break;
                        case "creditsUsed":
                            creditsUsed = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "suggestion":
                            suggestion = new Option<Suggestion?>(JsonSerializer.Deserialize<Suggestion>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "implementationMethod":
                            string? implementationMethodRawValue = utf8JsonReader.GetString();
                            if (implementationMethodRawValue != null)
                                implementationMethod = new Option<Implementation.ImplementationMethodEnum?>(Implementation.ImplementationMethodEnumFromStringOrDefault(implementationMethodRawValue));
                            break;
                        case "completedAt":
                            completedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metadata":
                            metadata = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "rollbacks":
                            rollbacks = new Option<List<Rollback>?>(JsonSerializer.Deserialize<List<Rollback>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Implementation.", nameof(id));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class Implementation.", nameof(status));

            if (!platform.IsSet)
                throw new ArgumentException("Property is required for class Implementation.", nameof(platform));

            if (!creditsUsed.IsSet)
                throw new ArgumentException("Property is required for class Implementation.", nameof(creditsUsed));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class Implementation.", nameof(createdAt));

            if (!suggestion.IsSet)
                throw new ArgumentException("Property is required for class Implementation.", nameof(suggestion));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Implementation.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Implementation.");

            if (platform.IsSet && platform.Value == null)
                throw new ArgumentNullException(nameof(platform), "Property is not nullable for class Implementation.");

            if (creditsUsed.IsSet && creditsUsed.Value == null)
                throw new ArgumentNullException(nameof(creditsUsed), "Property is not nullable for class Implementation.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Implementation.");

            if (suggestion.IsSet && suggestion.Value == null)
                throw new ArgumentNullException(nameof(suggestion), "Property is not nullable for class Implementation.");

            if (implementationMethod.IsSet && implementationMethod.Value == null)
                throw new ArgumentNullException(nameof(implementationMethod), "Property is not nullable for class Implementation.");

            if (completedAt.IsSet && completedAt.Value == null)
                throw new ArgumentNullException(nameof(completedAt), "Property is not nullable for class Implementation.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class Implementation.");

            if (rollbacks.IsSet && rollbacks.Value == null)
                throw new ArgumentNullException(nameof(rollbacks), "Property is not nullable for class Implementation.");

            return new Implementation(id.Value!, status.Value!.Value!, platform.Value!.Value!, creditsUsed.Value!.Value!, createdAt.Value!.Value!, suggestion.Value!, implementationMethod, completedAt, metadata, rollbacks);
        }

        /// <summary>
        /// Serializes a <see cref="Implementation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="implementation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Implementation implementation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, implementation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Implementation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="implementation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Implementation implementation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (implementation.Id == null)
                throw new ArgumentNullException(nameof(implementation.Id), "Property is required for class Implementation.");

            if (implementation.Suggestion == null)
                throw new ArgumentNullException(nameof(implementation.Suggestion), "Property is required for class Implementation.");

            if (implementation.MetadataOption.IsSet && implementation.Metadata == null)
                throw new ArgumentNullException(nameof(implementation.Metadata), "Property is required for class Implementation.");

            if (implementation.RollbacksOption.IsSet && implementation.Rollbacks == null)
                throw new ArgumentNullException(nameof(implementation.Rollbacks), "Property is required for class Implementation.");

            writer.WriteString("id", implementation.Id);

            var statusRawValue = Implementation.StatusEnumToJsonValue(implementation.Status);
            writer.WriteString("status", statusRawValue);
            var platformRawValue = Implementation.PlatformEnumToJsonValue(implementation.Platform);
            writer.WriteString("platform", platformRawValue);
            writer.WriteNumber("creditsUsed", implementation.CreditsUsed);

            writer.WriteString("createdAt", implementation.CreatedAt.ToString(CreatedAtFormat));

            writer.WritePropertyName("suggestion");
            JsonSerializer.Serialize(writer, implementation.Suggestion, jsonSerializerOptions);
            var implementationMethodRawValue = Implementation.ImplementationMethodEnumToJsonValue(implementation.ImplementationMethodOption.Value!.Value);
            writer.WriteString("implementationMethod", implementationMethodRawValue);
            if (implementation.CompletedAtOption.IsSet)
                writer.WriteString("completedAt", implementation.CompletedAtOption.Value!.Value.ToString(CompletedAtFormat));

            if (implementation.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, implementation.Metadata, jsonSerializerOptions);
            }
            if (implementation.RollbacksOption.IsSet)
            {
                writer.WritePropertyName("rollbacks");
                JsonSerializer.Serialize(writer, implementation.Rollbacks, jsonSerializerOptions);
            }
        }
    }
}
