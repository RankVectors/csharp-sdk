// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// ReportImplementationStatusRequest
    /// </summary>
    public partial class ReportImplementationStatusRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportImplementationStatusRequest" /> class.
        /// </summary>
        /// <param name="suggestionId">ID of the suggestion</param>
        /// <param name="apiKey">Your RankVectors API key</param>
        /// <param name="status">Implementation status</param>
        [JsonConstructor]
        public ReportImplementationStatusRequest(string suggestionId, string apiKey, StatusEnum status)
        {
            SuggestionId = suggestionId;
            ApiKey = apiKey;
            Status = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Implementation status
        /// </summary>
        /// <value>Implementation status</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Success for value: success
            /// </summary>
            Success = 1,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            Failed = 2
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("success"))
                return StatusEnum.Success;

            if (value.Equals("failed"))
                return StatusEnum.Failed;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("success"))
                return StatusEnum.Success;

            if (value.Equals("failed"))
                return StatusEnum.Failed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Success)
                return "success";

            if (value == StatusEnum.Failed)
                return "failed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Implementation status
        /// </summary>
        /// <value>Implementation status</value>
        /* <example>success</example> */
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// ID of the suggestion
        /// </summary>
        /// <value>ID of the suggestion</value>
        /* <example>sugg-123</example> */
        [JsonPropertyName("suggestionId")]
        public string SuggestionId { get; set; }

        /// <summary>
        /// Your RankVectors API key
        /// </summary>
        /// <value>Your RankVectors API key</value>
        /* <example>rv_1234567890abcdef</example> */
        [JsonPropertyName("apiKey")]
        public string ApiKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportImplementationStatusRequest {\n");
            sb.Append("  SuggestionId: ").Append(SuggestionId).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReportImplementationStatusRequest" />
    /// </summary>
    public class ReportImplementationStatusRequestJsonConverter : JsonConverter<ReportImplementationStatusRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReportImplementationStatusRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReportImplementationStatusRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> suggestionId = default;
            Option<string?> apiKey = default;
            Option<ReportImplementationStatusRequest.StatusEnum?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "suggestionId":
                            suggestionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "apiKey":
                            apiKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ReportImplementationStatusRequest.StatusEnum?>(ReportImplementationStatusRequest.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!suggestionId.IsSet)
                throw new ArgumentException("Property is required for class ReportImplementationStatusRequest.", nameof(suggestionId));

            if (!apiKey.IsSet)
                throw new ArgumentException("Property is required for class ReportImplementationStatusRequest.", nameof(apiKey));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class ReportImplementationStatusRequest.", nameof(status));

            if (suggestionId.IsSet && suggestionId.Value == null)
                throw new ArgumentNullException(nameof(suggestionId), "Property is not nullable for class ReportImplementationStatusRequest.");

            if (apiKey.IsSet && apiKey.Value == null)
                throw new ArgumentNullException(nameof(apiKey), "Property is not nullable for class ReportImplementationStatusRequest.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ReportImplementationStatusRequest.");

            return new ReportImplementationStatusRequest(suggestionId.Value!, apiKey.Value!, status.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ReportImplementationStatusRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reportImplementationStatusRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReportImplementationStatusRequest reportImplementationStatusRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, reportImplementationStatusRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReportImplementationStatusRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reportImplementationStatusRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReportImplementationStatusRequest reportImplementationStatusRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (reportImplementationStatusRequest.SuggestionId == null)
                throw new ArgumentNullException(nameof(reportImplementationStatusRequest.SuggestionId), "Property is required for class ReportImplementationStatusRequest.");

            if (reportImplementationStatusRequest.ApiKey == null)
                throw new ArgumentNullException(nameof(reportImplementationStatusRequest.ApiKey), "Property is required for class ReportImplementationStatusRequest.");

            writer.WriteString("suggestionId", reportImplementationStatusRequest.SuggestionId);

            writer.WriteString("apiKey", reportImplementationStatusRequest.ApiKey);

            var statusRawValue = ReportImplementationStatusRequest.StatusEnumToJsonValue(reportImplementationStatusRequest.Status);
            writer.WriteString("status", statusRawValue);
        }
    }
}
