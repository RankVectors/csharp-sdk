// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// CustomCredentials
    /// </summary>
    public partial class CustomCredentials : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomCredentials" /> class.
        /// </summary>
        /// <param name="webhookUrl">Webhook URL for implementation</param>
        /// <param name="apiKey">Webhook secret key</param>
        [JsonConstructor]
        public CustomCredentials(string webhookUrl, string apiKey)
        {
            WebhookUrl = webhookUrl;
            ApiKey = apiKey;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Webhook URL for implementation
        /// </summary>
        /// <value>Webhook URL for implementation</value>
        /* <example>https://yourapi.com/rankvectors-webhook</example> */
        [JsonPropertyName("webhookUrl")]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Webhook secret key
        /// </summary>
        /// <value>Webhook secret key</value>
        /* <example>your-webhook-secret-key</example> */
        [JsonPropertyName("apiKey")]
        public string ApiKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomCredentials {\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CustomCredentials" />
    /// </summary>
    public class CustomCredentialsJsonConverter : JsonConverter<CustomCredentials>
    {
        /// <summary>
        /// Deserializes json to <see cref="CustomCredentials" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CustomCredentials Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> webhookUrl = default;
            Option<string?> apiKey = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "webhookUrl":
                            webhookUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "apiKey":
                            apiKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!webhookUrl.IsSet)
                throw new ArgumentException("Property is required for class CustomCredentials.", nameof(webhookUrl));

            if (!apiKey.IsSet)
                throw new ArgumentException("Property is required for class CustomCredentials.", nameof(apiKey));

            if (webhookUrl.IsSet && webhookUrl.Value == null)
                throw new ArgumentNullException(nameof(webhookUrl), "Property is not nullable for class CustomCredentials.");

            if (apiKey.IsSet && apiKey.Value == null)
                throw new ArgumentNullException(nameof(apiKey), "Property is not nullable for class CustomCredentials.");

            return new CustomCredentials(webhookUrl.Value!, apiKey.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CustomCredentials" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customCredentials"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CustomCredentials customCredentials, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, customCredentials, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CustomCredentials" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customCredentials"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CustomCredentials customCredentials, JsonSerializerOptions jsonSerializerOptions)
        {
            if (customCredentials.WebhookUrl == null)
                throw new ArgumentNullException(nameof(customCredentials.WebhookUrl), "Property is required for class CustomCredentials.");

            if (customCredentials.ApiKey == null)
                throw new ArgumentNullException(nameof(customCredentials.ApiKey), "Property is required for class CustomCredentials.");

            writer.WriteString("webhookUrl", customCredentials.WebhookUrl);

            writer.WriteString("apiKey", customCredentials.ApiKey);
        }
    }
}
