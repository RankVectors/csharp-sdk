// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// CreditBalance
    /// </summary>
    public partial class CreditBalance : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditBalance" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="balance">balance</param>
        /// <param name="pageLimit">pageLimit</param>
        /// <param name="spendingLimit">spendingLimit</param>
        /// <param name="autoRecharge">autoRecharge</param>
        /// <param name="currentPeriod">currentPeriod</param>
        /// <param name="usageHistory">Usage history (if requested)</param>
        [JsonConstructor]
        public CreditBalance(bool success, CreditBalanceInfo balance, PageLimitStatus pageLimit, SpendingLimitStatus spendingLimit, AutoRechargeSettings autoRecharge, PeriodCharges currentPeriod, Option<List<UsageHistoryItem>?> usageHistory = default)
        {
            Success = success;
            Balance = balance;
            PageLimit = pageLimit;
            SpendingLimit = spendingLimit;
            AutoRecharge = autoRecharge;
            CurrentPeriod = currentPeriod;
            UsageHistoryOption = usageHistory;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("success")]
        public bool Success { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [JsonPropertyName("balance")]
        public CreditBalanceInfo Balance { get; set; }

        /// <summary>
        /// Gets or Sets PageLimit
        /// </summary>
        [JsonPropertyName("pageLimit")]
        public PageLimitStatus PageLimit { get; set; }

        /// <summary>
        /// Gets or Sets SpendingLimit
        /// </summary>
        [JsonPropertyName("spendingLimit")]
        public SpendingLimitStatus SpendingLimit { get; set; }

        /// <summary>
        /// Gets or Sets AutoRecharge
        /// </summary>
        [JsonPropertyName("autoRecharge")]
        public AutoRechargeSettings AutoRecharge { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPeriod
        /// </summary>
        [JsonPropertyName("currentPeriod")]
        public PeriodCharges CurrentPeriod { get; set; }

        /// <summary>
        /// Used to track the state of UsageHistory
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<UsageHistoryItem>?> UsageHistoryOption { get; private set; }

        /// <summary>
        /// Usage history (if requested)
        /// </summary>
        /// <value>Usage history (if requested)</value>
        [JsonPropertyName("usageHistory")]
        public List<UsageHistoryItem>? UsageHistory { get { return this.UsageHistoryOption; } set { this.UsageHistoryOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditBalance {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  PageLimit: ").Append(PageLimit).Append("\n");
            sb.Append("  SpendingLimit: ").Append(SpendingLimit).Append("\n");
            sb.Append("  AutoRecharge: ").Append(AutoRecharge).Append("\n");
            sb.Append("  CurrentPeriod: ").Append(CurrentPeriod).Append("\n");
            sb.Append("  UsageHistory: ").Append(UsageHistory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreditBalance" />
    /// </summary>
    public class CreditBalanceJsonConverter : JsonConverter<CreditBalance>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreditBalance" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreditBalance Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> success = default;
            Option<CreditBalanceInfo?> balance = default;
            Option<PageLimitStatus?> pageLimit = default;
            Option<SpendingLimitStatus?> spendingLimit = default;
            Option<AutoRechargeSettings?> autoRecharge = default;
            Option<PeriodCharges?> currentPeriod = default;
            Option<List<UsageHistoryItem>?> usageHistory = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "balance":
                            balance = new Option<CreditBalanceInfo?>(JsonSerializer.Deserialize<CreditBalanceInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pageLimit":
                            pageLimit = new Option<PageLimitStatus?>(JsonSerializer.Deserialize<PageLimitStatus>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "spendingLimit":
                            spendingLimit = new Option<SpendingLimitStatus?>(JsonSerializer.Deserialize<SpendingLimitStatus>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "autoRecharge":
                            autoRecharge = new Option<AutoRechargeSettings?>(JsonSerializer.Deserialize<AutoRechargeSettings>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "currentPeriod":
                            currentPeriod = new Option<PeriodCharges?>(JsonSerializer.Deserialize<PeriodCharges>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "usageHistory":
                            usageHistory = new Option<List<UsageHistoryItem>?>(JsonSerializer.Deserialize<List<UsageHistoryItem>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!success.IsSet)
                throw new ArgumentException("Property is required for class CreditBalance.", nameof(success));

            if (!balance.IsSet)
                throw new ArgumentException("Property is required for class CreditBalance.", nameof(balance));

            if (!pageLimit.IsSet)
                throw new ArgumentException("Property is required for class CreditBalance.", nameof(pageLimit));

            if (!spendingLimit.IsSet)
                throw new ArgumentException("Property is required for class CreditBalance.", nameof(spendingLimit));

            if (!autoRecharge.IsSet)
                throw new ArgumentException("Property is required for class CreditBalance.", nameof(autoRecharge));

            if (!currentPeriod.IsSet)
                throw new ArgumentException("Property is required for class CreditBalance.", nameof(currentPeriod));

            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class CreditBalance.");

            if (balance.IsSet && balance.Value == null)
                throw new ArgumentNullException(nameof(balance), "Property is not nullable for class CreditBalance.");

            if (pageLimit.IsSet && pageLimit.Value == null)
                throw new ArgumentNullException(nameof(pageLimit), "Property is not nullable for class CreditBalance.");

            if (spendingLimit.IsSet && spendingLimit.Value == null)
                throw new ArgumentNullException(nameof(spendingLimit), "Property is not nullable for class CreditBalance.");

            if (autoRecharge.IsSet && autoRecharge.Value == null)
                throw new ArgumentNullException(nameof(autoRecharge), "Property is not nullable for class CreditBalance.");

            if (currentPeriod.IsSet && currentPeriod.Value == null)
                throw new ArgumentNullException(nameof(currentPeriod), "Property is not nullable for class CreditBalance.");

            if (usageHistory.IsSet && usageHistory.Value == null)
                throw new ArgumentNullException(nameof(usageHistory), "Property is not nullable for class CreditBalance.");

            return new CreditBalance(success.Value!.Value!, balance.Value!, pageLimit.Value!, spendingLimit.Value!, autoRecharge.Value!, currentPeriod.Value!, usageHistory);
        }

        /// <summary>
        /// Serializes a <see cref="CreditBalance" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="creditBalance"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreditBalance creditBalance, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, creditBalance, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreditBalance" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="creditBalance"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreditBalance creditBalance, JsonSerializerOptions jsonSerializerOptions)
        {
            if (creditBalance.Balance == null)
                throw new ArgumentNullException(nameof(creditBalance.Balance), "Property is required for class CreditBalance.");

            if (creditBalance.PageLimit == null)
                throw new ArgumentNullException(nameof(creditBalance.PageLimit), "Property is required for class CreditBalance.");

            if (creditBalance.SpendingLimit == null)
                throw new ArgumentNullException(nameof(creditBalance.SpendingLimit), "Property is required for class CreditBalance.");

            if (creditBalance.AutoRecharge == null)
                throw new ArgumentNullException(nameof(creditBalance.AutoRecharge), "Property is required for class CreditBalance.");

            if (creditBalance.CurrentPeriod == null)
                throw new ArgumentNullException(nameof(creditBalance.CurrentPeriod), "Property is required for class CreditBalance.");

            if (creditBalance.UsageHistoryOption.IsSet && creditBalance.UsageHistory == null)
                throw new ArgumentNullException(nameof(creditBalance.UsageHistory), "Property is required for class CreditBalance.");

            writer.WriteBoolean("success", creditBalance.Success);

            writer.WritePropertyName("balance");
            JsonSerializer.Serialize(writer, creditBalance.Balance, jsonSerializerOptions);
            writer.WritePropertyName("pageLimit");
            JsonSerializer.Serialize(writer, creditBalance.PageLimit, jsonSerializerOptions);
            writer.WritePropertyName("spendingLimit");
            JsonSerializer.Serialize(writer, creditBalance.SpendingLimit, jsonSerializerOptions);
            writer.WritePropertyName("autoRecharge");
            JsonSerializer.Serialize(writer, creditBalance.AutoRecharge, jsonSerializerOptions);
            writer.WritePropertyName("currentPeriod");
            JsonSerializer.Serialize(writer, creditBalance.CurrentPeriod, jsonSerializerOptions);
            if (creditBalance.UsageHistoryOption.IsSet)
            {
                writer.WritePropertyName("usageHistory");
                JsonSerializer.Serialize(writer, creditBalance.UsageHistory, jsonSerializerOptions);
            }
        }
    }
}
