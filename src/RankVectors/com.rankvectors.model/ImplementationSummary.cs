// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// ImplementationSummary
    /// </summary>
    public partial class ImplementationSummary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImplementationSummary" /> class.
        /// </summary>
        /// <param name="total">Total number of implementations</param>
        /// <param name="succeeded">Number of successful implementations</param>
        /// <param name="failed">Number of failed implementations</param>
        /// <param name="creditsUsed">Total credits used</param>
        [JsonConstructor]
        public ImplementationSummary(int total, int succeeded, int failed, decimal creditsUsed)
        {
            Total = total;
            Succeeded = succeeded;
            Failed = failed;
            CreditsUsed = creditsUsed;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Total number of implementations
        /// </summary>
        /// <value>Total number of implementations</value>
        /* <example>2</example> */
        [JsonPropertyName("total")]
        public int Total { get; set; }

        /// <summary>
        /// Number of successful implementations
        /// </summary>
        /// <value>Number of successful implementations</value>
        /* <example>2</example> */
        [JsonPropertyName("succeeded")]
        public int Succeeded { get; set; }

        /// <summary>
        /// Number of failed implementations
        /// </summary>
        /// <value>Number of failed implementations</value>
        /* <example>0</example> */
        [JsonPropertyName("failed")]
        public int Failed { get; set; }

        /// <summary>
        /// Total credits used
        /// </summary>
        /// <value>Total credits used</value>
        /* <example>2</example> */
        [JsonPropertyName("creditsUsed")]
        public decimal CreditsUsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImplementationSummary {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Succeeded: ").Append(Succeeded).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  CreditsUsed: ").Append(CreditsUsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImplementationSummary" />
    /// </summary>
    public class ImplementationSummaryJsonConverter : JsonConverter<ImplementationSummary>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImplementationSummary" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImplementationSummary Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> total = default;
            Option<int?> succeeded = default;
            Option<int?> failed = default;
            Option<decimal?> creditsUsed = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "succeeded":
                            succeeded = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "failed":
                            failed = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "creditsUsed":
                            creditsUsed = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!total.IsSet)
                throw new ArgumentException("Property is required for class ImplementationSummary.", nameof(total));

            if (!succeeded.IsSet)
                throw new ArgumentException("Property is required for class ImplementationSummary.", nameof(succeeded));

            if (!failed.IsSet)
                throw new ArgumentException("Property is required for class ImplementationSummary.", nameof(failed));

            if (!creditsUsed.IsSet)
                throw new ArgumentException("Property is required for class ImplementationSummary.", nameof(creditsUsed));

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class ImplementationSummary.");

            if (succeeded.IsSet && succeeded.Value == null)
                throw new ArgumentNullException(nameof(succeeded), "Property is not nullable for class ImplementationSummary.");

            if (failed.IsSet && failed.Value == null)
                throw new ArgumentNullException(nameof(failed), "Property is not nullable for class ImplementationSummary.");

            if (creditsUsed.IsSet && creditsUsed.Value == null)
                throw new ArgumentNullException(nameof(creditsUsed), "Property is not nullable for class ImplementationSummary.");

            return new ImplementationSummary(total.Value!.Value!, succeeded.Value!.Value!, failed.Value!.Value!, creditsUsed.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ImplementationSummary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="implementationSummary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImplementationSummary implementationSummary, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, implementationSummary, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImplementationSummary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="implementationSummary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImplementationSummary implementationSummary, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("total", implementationSummary.Total);

            writer.WriteNumber("succeeded", implementationSummary.Succeeded);

            writer.WriteNumber("failed", implementationSummary.Failed);

            writer.WriteNumber("creditsUsed", implementationSummary.CreditsUsed);
        }
    }
}
