// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// Crawl
    /// </summary>
    public partial class Crawl : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Crawl" /> class.
        /// </summary>
        /// <param name="id">Unique crawl identifier</param>
        /// <param name="projectId">Project identifier</param>
        /// <param name="status">Crawl status</param>
        /// <param name="startedAt">Crawl start timestamp</param>
        /// <param name="completedAt">Crawl completion timestamp</param>
        /// <param name="pagesCrawled">Number of pages crawled</param>
        /// <param name="errorMessage">Error message if crawl failed</param>
        [JsonConstructor]
        public Crawl(string id, string projectId, StatusEnum status, DateTime startedAt, Option<DateTime?> completedAt = default, Option<int?> pagesCrawled = default, Option<string?> errorMessage = default)
        {
            Id = id;
            ProjectId = projectId;
            Status = status;
            StartedAt = startedAt;
            CompletedAtOption = completedAt;
            PagesCrawledOption = pagesCrawled;
            ErrorMessageOption = errorMessage;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Crawl status
        /// </summary>
        /// <value>Crawl status</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 1,

            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            InProgress = 2,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            Completed = 3,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            Failed = 4
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("in_progress"))
                return StatusEnum.InProgress;

            if (value.Equals("completed"))
                return StatusEnum.Completed;

            if (value.Equals("failed"))
                return StatusEnum.Failed;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("in_progress"))
                return StatusEnum.InProgress;

            if (value.Equals("completed"))
                return StatusEnum.Completed;

            if (value.Equals("failed"))
                return StatusEnum.Failed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Pending)
                return "pending";

            if (value == StatusEnum.InProgress)
                return "in_progress";

            if (value == StatusEnum.Completed)
                return "completed";

            if (value == StatusEnum.Failed)
                return "failed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Crawl status
        /// </summary>
        /// <value>Crawl status</value>
        /* <example>completed</example> */
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Unique crawl identifier
        /// </summary>
        /// <value>Unique crawl identifier</value>
        /* <example>crawl-123</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Project identifier
        /// </summary>
        /// <value>Project identifier</value>
        /* <example>proj-123</example> */
        [JsonPropertyName("projectId")]
        public string ProjectId { get; set; }

        /// <summary>
        /// Crawl start timestamp
        /// </summary>
        /// <value>Crawl start timestamp</value>
        /* <example>2025-01-15T10:00Z</example> */
        [JsonPropertyName("startedAt")]
        public DateTime StartedAt { get; set; }

        /// <summary>
        /// Used to track the state of CompletedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CompletedAtOption { get; private set; }

        /// <summary>
        /// Crawl completion timestamp
        /// </summary>
        /// <value>Crawl completion timestamp</value>
        /* <example>2025-01-15T10:05Z</example> */
        [JsonPropertyName("completedAt")]
        public DateTime? CompletedAt { get { return this.CompletedAtOption; } set { this.CompletedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of PagesCrawled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PagesCrawledOption { get; private set; }

        /// <summary>
        /// Number of pages crawled
        /// </summary>
        /// <value>Number of pages crawled</value>
        /* <example>150</example> */
        [JsonPropertyName("pagesCrawled")]
        public int? PagesCrawled { get { return this.PagesCrawledOption; } set { this.PagesCrawledOption = new(value); } }

        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ErrorMessageOption { get; private set; }

        /// <summary>
        /// Error message if crawl failed
        /// </summary>
        /// <value>Error message if crawl failed</value>
        /* <example>Connection timeout</example> */
        [JsonPropertyName("errorMessage")]
        public string? ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Crawl {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  PagesCrawled: ").Append(PagesCrawled).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Crawl" />
    /// </summary>
    public class CrawlJsonConverter : JsonConverter<Crawl>
    {
        /// <summary>
        /// The format to use to serialize StartedAt
        /// </summary>
        public static string StartedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CompletedAt
        /// </summary>
        public static string CompletedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Crawl" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Crawl Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> projectId = default;
            Option<Crawl.StatusEnum?> status = default;
            Option<DateTime?> startedAt = default;
            Option<DateTime?> completedAt = default;
            Option<int?> pagesCrawled = default;
            Option<string?> errorMessage = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "projectId":
                            projectId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<Crawl.StatusEnum?>(Crawl.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "startedAt":
                            startedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "completedAt":
                            completedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "pagesCrawled":
                            pagesCrawled = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Crawl.", nameof(id));

            if (!projectId.IsSet)
                throw new ArgumentException("Property is required for class Crawl.", nameof(projectId));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class Crawl.", nameof(status));

            if (!startedAt.IsSet)
                throw new ArgumentException("Property is required for class Crawl.", nameof(startedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Crawl.");

            if (projectId.IsSet && projectId.Value == null)
                throw new ArgumentNullException(nameof(projectId), "Property is not nullable for class Crawl.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Crawl.");

            if (startedAt.IsSet && startedAt.Value == null)
                throw new ArgumentNullException(nameof(startedAt), "Property is not nullable for class Crawl.");

            if (completedAt.IsSet && completedAt.Value == null)
                throw new ArgumentNullException(nameof(completedAt), "Property is not nullable for class Crawl.");

            if (pagesCrawled.IsSet && pagesCrawled.Value == null)
                throw new ArgumentNullException(nameof(pagesCrawled), "Property is not nullable for class Crawl.");

            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class Crawl.");

            return new Crawl(id.Value!, projectId.Value!, status.Value!.Value!, startedAt.Value!.Value!, completedAt, pagesCrawled, errorMessage);
        }

        /// <summary>
        /// Serializes a <see cref="Crawl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="crawl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Crawl crawl, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, crawl, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Crawl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="crawl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Crawl crawl, JsonSerializerOptions jsonSerializerOptions)
        {
            if (crawl.Id == null)
                throw new ArgumentNullException(nameof(crawl.Id), "Property is required for class Crawl.");

            if (crawl.ProjectId == null)
                throw new ArgumentNullException(nameof(crawl.ProjectId), "Property is required for class Crawl.");

            if (crawl.ErrorMessageOption.IsSet && crawl.ErrorMessage == null)
                throw new ArgumentNullException(nameof(crawl.ErrorMessage), "Property is required for class Crawl.");

            writer.WriteString("id", crawl.Id);

            writer.WriteString("projectId", crawl.ProjectId);

            var statusRawValue = Crawl.StatusEnumToJsonValue(crawl.Status);
            writer.WriteString("status", statusRawValue);
            writer.WriteString("startedAt", crawl.StartedAt.ToString(StartedAtFormat));

            if (crawl.CompletedAtOption.IsSet)
                writer.WriteString("completedAt", crawl.CompletedAtOption.Value!.Value.ToString(CompletedAtFormat));

            if (crawl.PagesCrawledOption.IsSet)
                writer.WriteNumber("pagesCrawled", crawl.PagesCrawledOption.Value!.Value);

            if (crawl.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", crawl.ErrorMessage);
        }
    }
}
