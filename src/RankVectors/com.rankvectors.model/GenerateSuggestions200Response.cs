// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// GenerateSuggestions200Response
    /// </summary>
    public partial class GenerateSuggestions200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateSuggestions200Response" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="count">Number of suggestions generated</param>
        /// <param name="opportunities">Top 10 opportunities preview</param>
        [JsonConstructor]
        public GenerateSuggestions200Response(Option<bool?> success = default, Option<int?> count = default, Option<List<LinkOpportunity>?> opportunities = default)
        {
            SuccessOption = success;
            CountOption = count;
            OpportunitiesOption = opportunities;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Success
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SuccessOption { get; private set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("success")]
        public bool? Success { get { return this.SuccessOption; } set { this.SuccessOption = new(value); } }

        /// <summary>
        /// Used to track the state of Count
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CountOption { get; private set; }

        /// <summary>
        /// Number of suggestions generated
        /// </summary>
        /// <value>Number of suggestions generated</value>
        /* <example>15</example> */
        [JsonPropertyName("count")]
        public int? Count { get { return this.CountOption; } set { this.CountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Opportunities
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<LinkOpportunity>?> OpportunitiesOption { get; private set; }

        /// <summary>
        /// Top 10 opportunities preview
        /// </summary>
        /// <value>Top 10 opportunities preview</value>
        [JsonPropertyName("opportunities")]
        public List<LinkOpportunity>? Opportunities { get { return this.OpportunitiesOption; } set { this.OpportunitiesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateSuggestions200Response {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Opportunities: ").Append(Opportunities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GenerateSuggestions200Response" />
    /// </summary>
    public class GenerateSuggestions200ResponseJsonConverter : JsonConverter<GenerateSuggestions200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="GenerateSuggestions200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GenerateSuggestions200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> success = default;
            Option<int?> count = default;
            Option<List<LinkOpportunity>?> opportunities = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "count":
                            count = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "opportunities":
                            opportunities = new Option<List<LinkOpportunity>?>(JsonSerializer.Deserialize<List<LinkOpportunity>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class GenerateSuggestions200Response.");

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class GenerateSuggestions200Response.");

            if (opportunities.IsSet && opportunities.Value == null)
                throw new ArgumentNullException(nameof(opportunities), "Property is not nullable for class GenerateSuggestions200Response.");

            return new GenerateSuggestions200Response(success, count, opportunities);
        }

        /// <summary>
        /// Serializes a <see cref="GenerateSuggestions200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateSuggestions200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GenerateSuggestions200Response generateSuggestions200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, generateSuggestions200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GenerateSuggestions200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateSuggestions200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GenerateSuggestions200Response generateSuggestions200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (generateSuggestions200Response.OpportunitiesOption.IsSet && generateSuggestions200Response.Opportunities == null)
                throw new ArgumentNullException(nameof(generateSuggestions200Response.Opportunities), "Property is required for class GenerateSuggestions200Response.");

            if (generateSuggestions200Response.SuccessOption.IsSet)
                writer.WriteBoolean("success", generateSuggestions200Response.SuccessOption.Value!.Value);

            if (generateSuggestions200Response.CountOption.IsSet)
                writer.WriteNumber("count", generateSuggestions200Response.CountOption.Value!.Value);

            if (generateSuggestions200Response.OpportunitiesOption.IsSet)
            {
                writer.WritePropertyName("opportunities");
                JsonSerializer.Serialize(writer, generateSuggestions200Response.Opportunities, jsonSerializerOptions);
            }
        }
    }
}
