// <auto-generated>
/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using RankVectors.Client;

namespace RankVectors.com.rankvectors.model
{
    /// <summary>
    /// ImplementationRequest
    /// </summary>
    public partial class ImplementationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImplementationRequest" /> class.
        /// </summary>
        /// <param name="suggestionIds">Array of suggestion IDs to implement</param>
        /// <param name="platform">Platform type</param>
        /// <param name="credentials">credentials</param>
        /// <param name="skipContentVerification">Skip content change detection (default to false)</param>
        /// <param name="implementationMethod">Implementation method (default to ImplementationMethodEnum.Api)</param>
        [JsonConstructor]
        public ImplementationRequest(List<string> suggestionIds, PlatformEnum platform, CustomCredentials credentials, Option<bool?> skipContentVerification = default, Option<ImplementationMethodEnum?> implementationMethod = default)
        {
            SuggestionIds = suggestionIds;
            Platform = platform;
            Credentials = credentials;
            SkipContentVerificationOption = skipContentVerification;
            ImplementationMethodOption = implementationMethod;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Platform type
        /// </summary>
        /// <value>Platform type</value>
        public enum PlatformEnum
        {
            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            Custom = 1
        }

        /// <summary>
        /// Returns a <see cref="PlatformEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PlatformEnum PlatformEnumFromString(string value)
        {
            if (value.Equals("custom"))
                return PlatformEnum.Custom;

            throw new NotImplementedException($"Could not convert value to type PlatformEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PlatformEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PlatformEnum? PlatformEnumFromStringOrDefault(string value)
        {
            if (value.Equals("custom"))
                return PlatformEnum.Custom;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PlatformEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PlatformEnumToJsonValue(PlatformEnum value)
        {
            if (value == PlatformEnum.Custom)
                return "custom";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Platform type
        /// </summary>
        /// <value>Platform type</value>
        /* <example>custom</example> */
        [JsonPropertyName("platform")]
        public PlatformEnum Platform { get; set; }

        /// <summary>
        /// Implementation method
        /// </summary>
        /// <value>Implementation method</value>
        public enum ImplementationMethodEnum
        {
            /// <summary>
            /// Enum Api for value: api
            /// </summary>
            Api = 1,

            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            Manual = 2
        }

        /// <summary>
        /// Returns a <see cref="ImplementationMethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ImplementationMethodEnum ImplementationMethodEnumFromString(string value)
        {
            if (value.Equals("api"))
                return ImplementationMethodEnum.Api;

            if (value.Equals("manual"))
                return ImplementationMethodEnum.Manual;

            throw new NotImplementedException($"Could not convert value to type ImplementationMethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ImplementationMethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ImplementationMethodEnum? ImplementationMethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("api"))
                return ImplementationMethodEnum.Api;

            if (value.Equals("manual"))
                return ImplementationMethodEnum.Manual;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ImplementationMethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ImplementationMethodEnumToJsonValue(ImplementationMethodEnum? value)
        {
            if (value == ImplementationMethodEnum.Api)
                return "api";

            if (value == ImplementationMethodEnum.Manual)
                return "manual";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ImplementationMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ImplementationMethodEnum?> ImplementationMethodOption { get; private set; }

        /// <summary>
        /// Implementation method
        /// </summary>
        /// <value>Implementation method</value>
        /* <example>api</example> */
        [JsonPropertyName("implementationMethod")]
        public ImplementationMethodEnum? ImplementationMethod { get { return this.ImplementationMethodOption; } set { this.ImplementationMethodOption = new(value); } }

        /// <summary>
        /// Array of suggestion IDs to implement
        /// </summary>
        /// <value>Array of suggestion IDs to implement</value>
        /* <example>[&quot;sugg-1&quot;,&quot;sugg-2&quot;]</example> */
        [JsonPropertyName("suggestionIds")]
        public List<string> SuggestionIds { get; set; }

        /// <summary>
        /// Gets or Sets Credentials
        /// </summary>
        [JsonPropertyName("credentials")]
        public CustomCredentials Credentials { get; set; }

        /// <summary>
        /// Used to track the state of SkipContentVerification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SkipContentVerificationOption { get; private set; }

        /// <summary>
        /// Skip content change detection
        /// </summary>
        /// <value>Skip content change detection</value>
        /* <example>false</example> */
        [JsonPropertyName("skipContentVerification")]
        public bool? SkipContentVerification { get { return this.SkipContentVerificationOption; } set { this.SkipContentVerificationOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImplementationRequest {\n");
            sb.Append("  SuggestionIds: ").Append(SuggestionIds).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  SkipContentVerification: ").Append(SkipContentVerification).Append("\n");
            sb.Append("  ImplementationMethod: ").Append(ImplementationMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImplementationRequest" />
    /// </summary>
    public class ImplementationRequestJsonConverter : JsonConverter<ImplementationRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImplementationRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImplementationRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> suggestionIds = default;
            Option<ImplementationRequest.PlatformEnum?> platform = default;
            Option<CustomCredentials?> credentials = default;
            Option<bool?> skipContentVerification = default;
            Option<ImplementationRequest.ImplementationMethodEnum?> implementationMethod = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "suggestionIds":
                            suggestionIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "platform":
                            string? platformRawValue = utf8JsonReader.GetString();
                            if (platformRawValue != null)
                                platform = new Option<ImplementationRequest.PlatformEnum?>(ImplementationRequest.PlatformEnumFromStringOrDefault(platformRawValue));
                            break;
                        case "credentials":
                            credentials = new Option<CustomCredentials?>(JsonSerializer.Deserialize<CustomCredentials>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "skipContentVerification":
                            skipContentVerification = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "implementationMethod":
                            string? implementationMethodRawValue = utf8JsonReader.GetString();
                            if (implementationMethodRawValue != null)
                                implementationMethod = new Option<ImplementationRequest.ImplementationMethodEnum?>(ImplementationRequest.ImplementationMethodEnumFromStringOrDefault(implementationMethodRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!suggestionIds.IsSet)
                throw new ArgumentException("Property is required for class ImplementationRequest.", nameof(suggestionIds));

            if (!platform.IsSet)
                throw new ArgumentException("Property is required for class ImplementationRequest.", nameof(platform));

            if (!credentials.IsSet)
                throw new ArgumentException("Property is required for class ImplementationRequest.", nameof(credentials));

            if (suggestionIds.IsSet && suggestionIds.Value == null)
                throw new ArgumentNullException(nameof(suggestionIds), "Property is not nullable for class ImplementationRequest.");

            if (platform.IsSet && platform.Value == null)
                throw new ArgumentNullException(nameof(platform), "Property is not nullable for class ImplementationRequest.");

            if (credentials.IsSet && credentials.Value == null)
                throw new ArgumentNullException(nameof(credentials), "Property is not nullable for class ImplementationRequest.");

            if (skipContentVerification.IsSet && skipContentVerification.Value == null)
                throw new ArgumentNullException(nameof(skipContentVerification), "Property is not nullable for class ImplementationRequest.");

            if (implementationMethod.IsSet && implementationMethod.Value == null)
                throw new ArgumentNullException(nameof(implementationMethod), "Property is not nullable for class ImplementationRequest.");

            return new ImplementationRequest(suggestionIds.Value!, platform.Value!.Value!, credentials.Value!, skipContentVerification, implementationMethod);
        }

        /// <summary>
        /// Serializes a <see cref="ImplementationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="implementationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImplementationRequest implementationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, implementationRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImplementationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="implementationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImplementationRequest implementationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (implementationRequest.SuggestionIds == null)
                throw new ArgumentNullException(nameof(implementationRequest.SuggestionIds), "Property is required for class ImplementationRequest.");

            if (implementationRequest.Credentials == null)
                throw new ArgumentNullException(nameof(implementationRequest.Credentials), "Property is required for class ImplementationRequest.");

            writer.WritePropertyName("suggestionIds");
            JsonSerializer.Serialize(writer, implementationRequest.SuggestionIds, jsonSerializerOptions);
            var platformRawValue = ImplementationRequest.PlatformEnumToJsonValue(implementationRequest.Platform);
            writer.WriteString("platform", platformRawValue);
            writer.WritePropertyName("credentials");
            JsonSerializer.Serialize(writer, implementationRequest.Credentials, jsonSerializerOptions);
            if (implementationRequest.SkipContentVerificationOption.IsSet)
                writer.WriteBoolean("skipContentVerification", implementationRequest.SkipContentVerificationOption.Value!.Value);

            var implementationMethodRawValue = ImplementationRequest.ImplementationMethodEnumToJsonValue(implementationRequest.ImplementationMethodOption.Value!.Value);
            writer.WriteString("implementationMethod", implementationMethodRawValue);
        }
    }
}
