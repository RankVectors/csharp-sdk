/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using RankVectors.com.rankvectors.api;
using RankVectors.com.rankvectors.model;

namespace RankVectors.Client
{
    /// <summary>
    /// Provides hosting configuration for RankVectors
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new AddCredits200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new AddCreditsRequestJsonConverter());
            _jsonOptions.Converters.Add(new AutoRechargeSettingsJsonConverter());
            _jsonOptions.Converters.Add(new ChangeResultJsonConverter());
            _jsonOptions.Converters.Add(new ContentVerificationJsonConverter());
            _jsonOptions.Converters.Add(new CrawlJsonConverter());
            _jsonOptions.Converters.Add(new CreateProjectRequestJsonConverter());
            _jsonOptions.Converters.Add(new CreditBalanceJsonConverter());
            _jsonOptions.Converters.Add(new CreditBalanceInfoJsonConverter());
            _jsonOptions.Converters.Add(new CustomCredentialsJsonConverter());
            _jsonOptions.Converters.Add(new DeleteProject200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ErrorJsonConverter());
            _jsonOptions.Converters.Add(new GenerateSuggestions200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new GenerateSuggestionsRequestJsonConverter());
            _jsonOptions.Converters.Add(new GetImplementation200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ImplementationJsonConverter());
            _jsonOptions.Converters.Add(new ImplementationInstructionsJsonConverter());
            _jsonOptions.Converters.Add(new ImplementationRequestJsonConverter());
            _jsonOptions.Converters.Add(new ImplementationResponseJsonConverter());
            _jsonOptions.Converters.Add(new ImplementationResultJsonConverter());
            _jsonOptions.Converters.Add(new ImplementationSummaryJsonConverter());
            _jsonOptions.Converters.Add(new LinkOpportunityJsonConverter());
            _jsonOptions.Converters.Add(new ListImplementations200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new PageInfoJsonConverter());
            _jsonOptions.Converters.Add(new PageLimitStatusJsonConverter());
            _jsonOptions.Converters.Add(new PeriodChargesJsonConverter());
            _jsonOptions.Converters.Add(new ProjectJsonConverter());
            _jsonOptions.Converters.Add(new ProjectCountJsonConverter());
            _jsonOptions.Converters.Add(new ReportImplementationStatus200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ReportImplementationStatusRequestJsonConverter());
            _jsonOptions.Converters.Add(new RollbackJsonConverter());
            _jsonOptions.Converters.Add(new RollbackImplementation200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new RollbackImplementationRequestJsonConverter());
            _jsonOptions.Converters.Add(new SpendingLimitStatusJsonConverter());
            _jsonOptions.Converters.Add(new StartCrawlRequestJsonConverter());
            _jsonOptions.Converters.Add(new StepByStepInstructionsJsonConverter());
            _jsonOptions.Converters.Add(new SuggestionJsonConverter());
            _jsonOptions.Converters.Add(new UpdateSuggestionRequestJsonConverter());
            _jsonOptions.Converters.Add(new UsageHistoryItemJsonConverter());
            _jsonOptions.Converters.Add(new VerifyContent200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new VerifyContentRequestJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<ContentVerificationApiEvents>();
            _services.AddSingleton<CrawlingApiEvents>();
            _services.AddSingleton<CreditsApiEvents>();
            _services.AddSingleton<ImplementationsApiEvents>();
            _services.AddSingleton<ProjectsApiEvents>();
            _services.AddSingleton<SuggestionsApiEvents>();
            _services.AddSingleton<WebhooksApiEvents>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IContentVerificationApi, ContentVerificationApi>(client));
            builders.Add(_services.AddHttpClient<ICrawlingApi, CrawlingApi>(client));
            builders.Add(_services.AddHttpClient<ICreditsApi, CreditsApi>(client));
            builders.Add(_services.AddHttpClient<IImplementationsApi, ImplementationsApi>(client));
            builders.Add(_services.AddHttpClient<IProjectsApi, ProjectsApi>(client));
            builders.Add(_services.AddHttpClient<ISuggestionsApi, SuggestionsApi>(client));
            builders.Add(_services.AddHttpClient<IWebhooksApi, WebhooksApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
