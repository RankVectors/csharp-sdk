/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using RankVectors.Client;
using RankVectors.com.rankvectors.api;
using RankVectors.Extensions;
using Xunit;

namespace RankVectors.Test.com.rankvectors.api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Authorization, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Authorization, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Authorization, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Authorization, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var contentVerificationApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IContentVerificationApi>();
            Assert.True(contentVerificationApi.HttpClient.BaseAddress != null);

            var crawlingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICrawlingApi>();
            Assert.True(crawlingApi.HttpClient.BaseAddress != null);

            var creditsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICreditsApi>();
            Assert.True(creditsApi.HttpClient.BaseAddress != null);

            var implementationsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IImplementationsApi>();
            Assert.True(implementationsApi.HttpClient.BaseAddress != null);

            var projectsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IProjectsApi>();
            Assert.True(projectsApi.HttpClient.BaseAddress != null);

            var suggestionsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISuggestionsApi>();
            Assert.True(suggestionsApi.HttpClient.BaseAddress != null);

            var webhooksApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var contentVerificationApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IContentVerificationApi>();
            Assert.True(contentVerificationApi.HttpClient.BaseAddress != null);

            var crawlingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICrawlingApi>();
            Assert.True(crawlingApi.HttpClient.BaseAddress != null);

            var creditsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICreditsApi>();
            Assert.True(creditsApi.HttpClient.BaseAddress != null);

            var implementationsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IImplementationsApi>();
            Assert.True(implementationsApi.HttpClient.BaseAddress != null);

            var projectsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IProjectsApi>();
            Assert.True(projectsApi.HttpClient.BaseAddress != null);

            var suggestionsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISuggestionsApi>();
            Assert.True(suggestionsApi.HttpClient.BaseAddress != null);

            var webhooksApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var contentVerificationApi = _hostUsingAddWithAClient.Services.GetRequiredService<IContentVerificationApi>();
            Assert.True(contentVerificationApi.HttpClient.BaseAddress != null);
            
            var crawlingApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICrawlingApi>();
            Assert.True(crawlingApi.HttpClient.BaseAddress != null);
            
            var creditsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICreditsApi>();
            Assert.True(creditsApi.HttpClient.BaseAddress != null);
            
            var implementationsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IImplementationsApi>();
            Assert.True(implementationsApi.HttpClient.BaseAddress != null);
            
            var projectsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IProjectsApi>();
            Assert.True(projectsApi.HttpClient.BaseAddress != null);
            
            var suggestionsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISuggestionsApi>();
            Assert.True(suggestionsApi.HttpClient.BaseAddress != null);
            
            var webhooksApi = _hostUsingAddWithAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var contentVerificationApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IContentVerificationApi>();
            Assert.True(contentVerificationApi.HttpClient.BaseAddress != null);

            var crawlingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICrawlingApi>();
            Assert.True(crawlingApi.HttpClient.BaseAddress != null);

            var creditsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICreditsApi>();
            Assert.True(creditsApi.HttpClient.BaseAddress != null);

            var implementationsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IImplementationsApi>();
            Assert.True(implementationsApi.HttpClient.BaseAddress != null);

            var projectsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IProjectsApi>();
            Assert.True(projectsApi.HttpClient.BaseAddress != null);

            var suggestionsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISuggestionsApi>();
            Assert.True(suggestionsApi.HttpClient.BaseAddress != null);

            var webhooksApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);
        }
    }
}
