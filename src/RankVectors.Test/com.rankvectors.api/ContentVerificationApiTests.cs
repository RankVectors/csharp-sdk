/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using RankVectors.com.rankvectors.api;
using RankVectors.com.rankvectors.model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace RankVectors.Test.com.rankvectors.api
{
    /// <summary>
    ///  Class for testing ContentVerificationApi
    /// </summary>
    public sealed class ContentVerificationApiTests : ApiTestsBase
    {
        private readonly IContentVerificationApi _instance;

        public ContentVerificationApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IContentVerificationApi>();
        }

        /// <summary>
        /// Test VerifyContent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VerifyContentAsyncTest()
        {
            string projectId = default!;
            VerifyContentRequest verifyContentRequest = default!;
            var response = await _instance.VerifyContentAsync(projectId, verifyContentRequest);
            var model = response.Ok();
            Assert.IsType<VerifyContent200Response>(model);
        }
    }
}
