/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using RankVectors.com.rankvectors.model;
using RankVectors.Client;
using System.Reflection;

namespace RankVectors.Test.Model
{
    /// <summary>
    ///  Class for testing ImplementationSummary
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ImplementationSummaryTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ImplementationSummary
        //private ImplementationSummary instance;

        public ImplementationSummaryTests()
        {
            // TODO uncomment below to create an instance of ImplementationSummary
            //instance = new ImplementationSummary();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ImplementationSummary
        /// </summary>
        [Fact]
        public void ImplementationSummaryInstanceTest()
        {
            // TODO uncomment below to test "IsType" ImplementationSummary
            //Assert.IsType<ImplementationSummary>(instance);
        }

        /// <summary>
        /// Test the property 'Total'
        /// </summary>
        [Fact]
        public void TotalTest()
        {
            // TODO unit test for the property 'Total'
        }

        /// <summary>
        /// Test the property 'Succeeded'
        /// </summary>
        [Fact]
        public void SucceededTest()
        {
            // TODO unit test for the property 'Succeeded'
        }

        /// <summary>
        /// Test the property 'Failed'
        /// </summary>
        [Fact]
        public void FailedTest()
        {
            // TODO unit test for the property 'Failed'
        }

        /// <summary>
        /// Test the property 'CreditsUsed'
        /// </summary>
        [Fact]
        public void CreditsUsedTest()
        {
            // TODO unit test for the property 'CreditsUsed'
        }
    }
}
