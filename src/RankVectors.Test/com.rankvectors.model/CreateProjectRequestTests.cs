/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using RankVectors.com.rankvectors.model;
using RankVectors.Client;
using System.Reflection;

namespace RankVectors.Test.Model
{
    /// <summary>
    ///  Class for testing CreateProjectRequest
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class CreateProjectRequestTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for CreateProjectRequest
        //private CreateProjectRequest instance;

        public CreateProjectRequestTests()
        {
            // TODO uncomment below to create an instance of CreateProjectRequest
            //instance = new CreateProjectRequest();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CreateProjectRequest
        /// </summary>
        [Fact]
        public void CreateProjectRequestInstanceTest()
        {
            // TODO uncomment below to test "IsType" CreateProjectRequest
            //Assert.IsType<CreateProjectRequest>(instance);
        }

        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }

        /// <summary>
        /// Test the property 'Domain'
        /// </summary>
        [Fact]
        public void DomainTest()
        {
            // TODO unit test for the property 'Domain'
        }

        /// <summary>
        /// Test the property 'Prompt'
        /// </summary>
        [Fact]
        public void PromptTest()
        {
            // TODO unit test for the property 'Prompt'
        }

        /// <summary>
        /// Test the property 'SearchQuery'
        /// </summary>
        [Fact]
        public void SearchQueryTest()
        {
            // TODO unit test for the property 'SearchQuery'
        }

        /// <summary>
        /// Test the property 'SitemapMode'
        /// </summary>
        [Fact]
        public void SitemapModeTest()
        {
            // TODO unit test for the property 'SitemapMode'
        }

        /// <summary>
        /// Test the property 'IncludeSubdomains'
        /// </summary>
        [Fact]
        public void IncludeSubdomainsTest()
        {
            // TODO unit test for the property 'IncludeSubdomains'
        }

        /// <summary>
        /// Test the property 'IgnoreQueryParams'
        /// </summary>
        [Fact]
        public void IgnoreQueryParamsTest()
        {
            // TODO unit test for the property 'IgnoreQueryParams'
        }

        /// <summary>
        /// Test the property 'MaxDiscoveryDepth'
        /// </summary>
        [Fact]
        public void MaxDiscoveryDepthTest()
        {
            // TODO unit test for the property 'MaxDiscoveryDepth'
        }

        /// <summary>
        /// Test the property 'ExcludePaths'
        /// </summary>
        [Fact]
        public void ExcludePathsTest()
        {
            // TODO unit test for the property 'ExcludePaths'
        }

        /// <summary>
        /// Test the property 'IncludePaths'
        /// </summary>
        [Fact]
        public void IncludePathsTest()
        {
            // TODO unit test for the property 'IncludePaths'
        }

        /// <summary>
        /// Test the property 'CrawlEntireDomain'
        /// </summary>
        [Fact]
        public void CrawlEntireDomainTest()
        {
            // TODO unit test for the property 'CrawlEntireDomain'
        }

        /// <summary>
        /// Test the property 'AllowExternalLinks'
        /// </summary>
        [Fact]
        public void AllowExternalLinksTest()
        {
            // TODO unit test for the property 'AllowExternalLinks'
        }

        /// <summary>
        /// Test the property 'MaxPages'
        /// </summary>
        [Fact]
        public void MaxPagesTest()
        {
            // TODO unit test for the property 'MaxPages'
        }

        /// <summary>
        /// Test the property 'CrawlDelay'
        /// </summary>
        [Fact]
        public void CrawlDelayTest()
        {
            // TODO unit test for the property 'CrawlDelay'
        }

        /// <summary>
        /// Test the property 'CrawlMaxConcurrency'
        /// </summary>
        [Fact]
        public void CrawlMaxConcurrencyTest()
        {
            // TODO unit test for the property 'CrawlMaxConcurrency'
        }

        /// <summary>
        /// Test the property 'OnlyMainContent'
        /// </summary>
        [Fact]
        public void OnlyMainContentTest()
        {
            // TODO unit test for the property 'OnlyMainContent'
        }

        /// <summary>
        /// Test the property 'CustomHeaders'
        /// </summary>
        [Fact]
        public void CustomHeadersTest()
        {
            // TODO unit test for the property 'CustomHeaders'
        }

        /// <summary>
        /// Test the property 'WaitFor'
        /// </summary>
        [Fact]
        public void WaitForTest()
        {
            // TODO unit test for the property 'WaitFor'
        }

        /// <summary>
        /// Test the property 'BlockAds'
        /// </summary>
        [Fact]
        public void BlockAdsTest()
        {
            // TODO unit test for the property 'BlockAds'
        }

        /// <summary>
        /// Test the property 'ProxyMode'
        /// </summary>
        [Fact]
        public void ProxyModeTest()
        {
            // TODO unit test for the property 'ProxyMode'
        }

        /// <summary>
        /// Test the property 'UseReranking'
        /// </summary>
        [Fact]
        public void UseRerankingTest()
        {
            // TODO unit test for the property 'UseReranking'
        }

        /// <summary>
        /// Test the property 'EnableChangeTracking'
        /// </summary>
        [Fact]
        public void EnableChangeTrackingTest()
        {
            // TODO unit test for the property 'EnableChangeTracking'
        }
    }
}
